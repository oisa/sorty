{"version":3,"sources":["components/HeaderLogo.js","assets/BubbleIcon.js","assets/InsertionIcon.js","assets/BucketIcon.js","assets/RadixIcon.js","components/SortInfo.js","components/SortOptions.js","assets/SortIcon.js","components/SortingVisualizer2D.js","components/SortingVisualizer.js","components/theme.js","components/global.js","components/DosAtariMode.js","assets/MergeIcon.js","assets/QuicksortIcon.js","components/App.js","reportWebVitals.js","index.js"],"names":["HeaderLogo","className","Component","BubbleIcon","width","height","viewBox","fill","xmlns","fill-rule","clip-rule","d","InsertionIcon","BucketIcon","RadixIcon","SortInfo","props","state","ram","this","sortName","type","stability","space","bestCase","averageCase","worstCase","SortIcon","randomIntFromInterval","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo","length","i","getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","j","push","doMerge","SortingVisualizer","softShadows","SpinningMesh","position","color","speed","args","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","useSpring","scale","ref","onClick","castShadow","attach","factor","mergeSortV","half","left","right","arr","shift","merge","splice","arraySteps","isActive","timer","resetArray","setState","t","m","bubbleSort","insertionSort","bucketSort","radixSort","mergeSort","storeArr","swapped","end","tmp","console","log","setTimeout","item","items","arr0","arr1","arr2","insertionSortBucket","input","index","Infinity","bucketCount","buckets","Array","concat","getNum","num","strNum","String","foundNum","undefined","maxLength","largest","forEach","largestNum","from","flat","value","onChange","e","target","determineMethod","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","map","val","idx","keyIdx","dosTheme","primary","primary_rgb","secondary","secondary_rgb","tertiary","tertiary_rgb","gradient_top","gradient_bottom","atariTheme","GlobalStyles","createGlobalStyle","theme","DosAtariMode","currentTheme","localStorage","getItem","setItem","setTheme","checked","MergeIcon","QuicksortIcon","App","method","active","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e15e911.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass HeaderLogo extends Component {\n  render() {\n    return (\n      <div className=\"header-logo\">\n        Sorty\n      </div>\n    )\n  }\n}\n\nexport default HeaderLogo;\n","import React from 'react';\n\nconst BubbleIcon = () => {\n  return (\n        <svg className='btn-icon' width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n        <path d=\"M29.7789 16.6879C29.7789 12.7195 26.5632 9.46948 22.5605 9.46948C18.5921 9.46948 15.3421 12.6853 15.3421 16.6879C15.3421 20.6563 18.5579 23.9063 22.5605 23.9063C26.5632 23.9063 29.7789 20.6563 29.7789 16.6879ZM22.5947 22.1958C19.5842 22.1958 17.121 19.7326 17.121 16.7221C17.121 13.7116 19.5842 11.2484 22.5947 11.2484C25.6053 11.2484 28.0684 13.7116 28.0684 16.7221C28.0684 19.7326 25.6053 22.1958 22.5947 22.1958Z\" />\n        <path d=\"M22.5947 12.48C20.2684 12.48 18.3526 14.3958 18.3526 16.7221C18.3526 17.201 18.7289 17.5773 19.2079 17.5773C19.6868 17.5773 20.0632 17.201 20.0632 16.7221C20.0632 15.3195 21.1921 14.1905 22.5947 14.1905C23.0737 14.1905 23.45 13.8142 23.45 13.3352C23.45 12.8563 23.0737 12.48 22.5947 12.48Z\" />\n        <path d=\"M31.8316 24.5221C27.5553 24.5221 24.1 28.0116 24.1 32.2537C24.1 36.4958 27.5895 39.9853 31.8316 39.9853C36.0737 39.9853 39.5974 36.5642 39.5974 32.2879C39.5974 28.0116 36.1079 24.5221 31.8316 24.5221ZM31.8316 38.3089C28.5131 38.3089 25.8105 35.6063 25.8105 32.2879C25.8105 28.9695 28.5131 26.2326 31.8316 26.2326C35.15 26.2326 37.8868 28.9353 37.8868 32.2879C37.8868 35.6405 35.1842 38.3089 31.8316 38.3089Z\" />\n        <path d=\"M36.6895 14.4984C34.329 14.4984 32.379 16.4142 32.379 18.8089C32.379 21.1695 34.2947 23.1195 36.6895 23.1195C39.05 23.1195 41 21.2037 41 18.8089C41 16.4142 39.0842 14.4984 36.6895 14.4984ZM36.6895 21.3747C35.2526 21.3747 34.0895 20.2116 34.0895 18.7747C34.0895 17.3379 35.2526 16.1747 36.6895 16.1747C38.1263 16.1747 39.2895 17.3379 39.2895 18.7747C39.2895 20.2116 38.1263 21.3747 36.6895 21.3747Z\" />\n        <path d=\"M17.0868 27.8406C17.0868 25.48 15.1711 23.53 12.7763 23.53C10.4158 23.53 8.5 25.48 8.5 27.8406C8.5 30.2011 10.4158 32.1511 12.8105 32.1511C15.1711 32.1511 17.0868 30.2011 17.0868 27.8406ZM12.8105 30.4406C11.3737 30.4406 10.2105 29.2774 10.2105 27.8406C10.2105 26.4037 11.3737 25.2406 12.8105 25.2406C14.2474 25.2406 15.4105 26.4037 15.4105 27.8406C15.3763 29.2774 14.2132 30.4406 12.8105 30.4406Z\" />\n        <path d=\"M18.4553 33.4169C16.6421 33.4169 15.1711 34.8879 15.1711 36.7011C15.1711 38.5142 16.6421 39.9853 18.4553 39.9853C20.2684 39.9853 21.7395 38.5142 21.7395 36.7011C21.7395 34.8879 20.2684 33.4169 18.4553 33.4169ZM18.4553 38.2748C17.6 38.2748 16.8816 37.5563 16.8816 36.7011C16.8816 35.8458 17.6 35.1274 18.4553 35.1274C19.3105 35.1274 20.029 35.8458 20.029 36.7011C20.029 37.5563 19.3105 38.2748 18.4553 38.2748Z\" />\n        <path d=\"M31.8316 27.7379C29.3342 27.7379 27.3158 29.7563 27.3158 32.2537C27.3158 32.7327 27.6921 33.109 28.1711 33.109C28.65 33.109 29.0263 32.7327 29.0263 32.2537C29.0263 30.7142 30.2921 29.4484 31.8316 29.4484C32.3105 29.4484 32.6868 29.0721 32.6868 28.5932C32.6868 28.1142 32.3105 27.7379 31.8316 27.7379Z\" />\n        </svg>\n  )\n};\n\nexport default BubbleIcon;\n","import React from 'react';\n\nconst InsertionIcon = () => {\n  return (\n    <svg className=\"btn-icon\" width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n    <path d=\"M9.81846 28V25.92L11.5585 25.44V25.26H8.07846V24H12.6385V26.2L10.7785 26.74V26.92H11.0185C11.2651 26.92 11.5085 26.96 11.7485 27.04C11.9885 27.1133 12.1985 27.23 12.3785 27.39C12.5651 27.55 12.7151 27.75 12.8285 27.99C12.9418 28.2233 12.9985 28.5 12.9985 28.82V28.94C12.9985 29.2533 12.9451 29.5433 12.8385 29.81C12.7385 30.0767 12.5851 30.31 12.3785 30.51C12.1785 30.7033 11.9285 30.8567 11.6285 30.97C11.3285 31.0833 10.9851 31.14 10.5985 31.14C10.2051 31.14 9.84846 31.0767 9.52846 30.95C9.20846 30.8233 8.93513 30.65 8.70846 30.43C8.48846 30.21 8.31846 29.9567 8.19846 29.67C8.07846 29.3833 8.01846 29.08 8.01846 28.76V28.34H9.33846V28.7C9.33846 29.02 9.4418 29.2967 9.64846 29.53C9.85513 29.7633 10.1651 29.88 10.5785 29.88C10.9318 29.88 11.2018 29.79 11.3885 29.61C11.5818 29.43 11.6785 29.1933 11.6785 28.9C11.6785 28.5867 11.5751 28.36 11.3685 28.22C11.1685 28.0733 10.9118 28 10.5985 28H9.81846Z\" />\n    <path d=\"M21.0385 24H25.9585V26.06L23.4285 29.76C23.2951 29.96 23.1885 30.1333 23.1085 30.28C23.0351 30.42 22.9985 30.58 22.9985 30.76V31H21.5785V30.7C21.5785 30.5667 21.5885 30.4467 21.6085 30.34C21.6285 30.2333 21.6585 30.1267 21.6985 30.02C21.7451 29.9133 21.8051 29.8 21.8785 29.68C21.9518 29.56 22.0418 29.42 22.1485 29.26L24.7585 25.44V25.26H21.0385V24Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M43 24C43 22.3431 41.6568 21 40 21H33C31.3431 21 30 22.3431 30 24V31C30 32.6569 31.3431 34 33 34H40C41.6568 34 43 32.6569 43 31V24ZM34.0985 24V27.88H36.2585C36.2918 27.7667 36.3685 27.67 36.4885 27.59C36.6085 27.5033 36.7651 27.46 36.9585 27.46C37.2518 27.46 37.4885 27.5567 37.6685 27.75C37.8485 27.9367 37.9385 28.22 37.9385 28.6C37.9385 29 37.8151 29.3133 37.5685 29.54C37.3285 29.7667 36.9985 29.88 36.5785 29.88C36.1585 29.88 35.8385 29.7667 35.6185 29.54C35.4051 29.3067 35.2985 29.0133 35.2985 28.66V28.54H33.9785V28.78C33.9785 29.12 34.0351 29.4367 34.1485 29.73C34.2685 30.0167 34.4385 30.2667 34.6585 30.48C34.8851 30.6867 35.1618 30.85 35.4885 30.97C35.8151 31.0833 36.1918 31.14 36.6185 31.14C37.0451 31.14 37.4218 31.07 37.7485 30.93C38.0751 30.79 38.3485 30.6033 38.5685 30.37C38.7951 30.13 38.9651 29.8533 39.0785 29.54C39.1985 29.2267 39.2585 28.8933 39.2585 28.54V28.48C39.2585 28.1467 39.2085 27.84 39.1085 27.56C39.0151 27.28 38.8785 27.04 38.6985 26.84C38.5185 26.64 38.2985 26.4833 38.0385 26.37C37.7785 26.2567 37.4851 26.2 37.1585 26.2C36.7251 26.2 36.3785 26.2967 36.1185 26.49C35.8651 26.6767 35.6918 26.9 35.5985 27.16H35.4185V25.26H38.7785V24H34.0985Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M33.3074 10.0556C35.0356 12.382 36.0683 15.5196 36.8201 18.2764C36.9436 18.7293 36.6766 19.1965 36.2237 19.3201C35.7708 19.4436 35.3035 19.1766 35.18 18.7237C34.4318 15.9804 33.4645 13.1179 31.9427 11.0694C31.19 10.0561 30.3229 9.27194 29.3083 8.7917C28.3021 8.31547 27.1005 8.11378 25.6293 8.34014C22.8073 8.77432 21.1136 10.8203 20.0416 13.5598C19.2413 15.605 18.8325 17.933 18.5723 20.0245L20.9235 17.6843C21.2868 17.387 21.8223 17.4406 22.1196 17.8039C22.4169 18.1672 22.3633 18.7027 22 19L18.0383 22.6579C17.675 22.9552 17.1395 22.9016 16.8422 22.5383L13.6843 18.5765C13.387 18.2132 13.4406 17.6777 13.8039 17.3804C14.1672 17.0831 14.7027 17.1367 15 17.5L16.8751 19.8939C17.1424 17.7203 17.5771 15.1926 18.4585 12.9403C19.6365 9.92984 21.6927 7.22581 25.3708 6.65991C27.1496 6.38622 28.6979 6.622 30.0356 7.25514C31.3647 7.88426 32.4351 8.88135 33.3074 10.0556Z\" />\n    </svg>\n  );\n};\n\nexport default InsertionIcon;\n","import React from 'react';\n\nconst BucketIcon = () => {\n    return (\n\n      <svg className=\"btn-icon\" width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M25 17.8814C27.8814 17.8814 30.4903 18.1356 32.3982 18.5463C33.1186 18.7027 33.7416 18.8787 34.2478 19.0939C33.8389 17.588 32.9434 15.8475 31.4832 14.4785C30.5487 13.5984 29.3805 12.8553 27.9398 12.425C27.6673 12.7379 27.2779 12.9531 26.8301 12.9531H23.1699C22.7221 12.9531 22.3133 12.7379 22.0602 12.425C20.6195 12.8553 19.4513 13.5984 18.5168 14.4785C17.0566 15.8475 16.1611 17.588 15.7522 19.0939C16.2584 18.8787 16.8814 18.7027 17.5823 18.5463C19.4903 18.1356 22.1186 17.8814 25 17.8814ZM23.1699 10H26.8301C27.4531 10 27.9982 10.4107 28.2124 10.9778C29.9451 11.4668 31.3664 12.3468 32.4956 13.4029C34.8319 15.6128 35.9027 18.6441 35.9805 20.7171C36 20.7562 36 20.7953 36 20.8344V20.8735V20.9713H35.9805C35.9805 21.0104 35.9805 21.0495 35.9611 21.0887L33.3133 38.631C33.2743 38.9439 33.0212 39.1786 32.7292 39.2373C30.5876 39.7458 27.7841 40 25 40C22.1965 40 19.3929 39.7458 17.2319 39.2373C16.9398 39.1591 16.7257 38.9244 16.6867 38.631L14.0389 21.0887C14.0195 21.0495 14.0195 21.0104 14.0195 20.9713H14V20.8735V20.8344C14 20.7953 14 20.7562 14 20.7171C14.0779 18.6441 15.1681 15.6128 17.5044 13.4029C18.6336 12.3468 20.0549 11.4668 21.7876 10.9778C21.9823 10.4107 22.5274 10 23.1699 10ZM34.2673 22.5554C33.7416 22.7705 33.1186 22.9661 32.3982 23.103C30.4903 23.5137 27.8814 23.7679 25 23.7679C22.1186 23.7679 19.4903 23.5137 17.5823 23.103C16.8814 22.9661 16.2584 22.7705 15.7327 22.5554L18.0496 37.9074C20.0159 38.3181 22.508 38.5137 25 38.5137C27.492 38.5137 29.9841 38.3181 31.9504 37.9074L34.2673 22.5554ZM15.4796 20.7953V20.8735C15.6159 21.0887 16.5115 21.382 17.8938 21.6754C19.7044 22.0665 22.2159 22.3012 25 22.3012C27.7841 22.3012 30.2956 22.0665 32.1062 21.6754C33.4885 21.382 34.3841 21.0887 34.5204 20.8735V20.7953C34.4619 20.5997 33.5469 20.2868 32.1062 19.9935C30.2956 19.6023 27.7841 19.3481 25 19.3481C22.2159 19.3481 19.7044 19.6023 17.8938 19.9935C16.4531 20.2868 15.5381 20.5997 15.4796 20.7953Z\" />\n      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n      </svg>\n    )\n};\n\nexport default BucketIcon;\n","import React from 'react';\n\nconst RadixIcon = () => {\n  return (\n    <svg className=\"btn-icon\" width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M43 8C43 6.34315 41.6569 5 40 5H10C8.34315 5 7 6.34315 7 8V14C7 15.6569 8.34315 17 10 17H40C41.6569 17 43 15.6569 43 14V8ZM29.2893 8.29398V12.866H27.5073V14H32.0433V12.866H30.4773V7.69997H28.1553L27.3993 10.346V10.454H28.5333L29.1273 8.29398H29.2893ZM32.856 10.148C32.856 9.33198 33.06 8.69897 33.468 8.24897C33.882 7.79897 34.452 7.57397 35.178 7.57397C35.904 7.57397 36.471 7.79897 36.879 8.24897C37.293 8.69897 37.5 9.33198 37.5 10.148V11.552C37.5 12.392 37.293 13.031 36.879 13.469C36.471 13.907 35.904 14.126 35.178 14.126C34.452 14.126 33.882 13.907 33.468 13.469C33.06 13.031 32.856 12.392 32.856 11.552V10.148ZM35.718 12.947C35.574 13.013 35.394 13.046 35.178 13.046C34.962 13.046 34.782 13.013 34.638 12.947C34.494 12.875 34.377 12.776 34.287 12.65C34.197 12.524 34.134 12.374 34.098 12.2C34.062 12.026 34.044 11.834 34.044 11.624V10.076C34.044 9.87797 34.065 9.69197 34.107 9.51797C34.149 9.34397 34.215 9.19398 34.305 9.06798C34.395 8.94198 34.512 8.84298 34.656 8.77097C34.8 8.69297 34.974 8.65397 35.178 8.65397C35.382 8.65397 35.556 8.69297 35.7 8.77097C35.844 8.84298 35.961 8.94198 36.051 9.06798C36.141 9.19398 36.207 9.34397 36.249 9.51797C36.291 9.69197 36.312 9.87797 36.312 10.076V11.624C36.312 11.834 36.294 12.026 36.258 12.2C36.222 12.374 36.159 12.524 36.069 12.65C35.979 12.776 35.862 12.875 35.718 12.947ZM16.982 14V12.866H13.742V12.758C13.742 12.632 13.76 12.521 13.796 12.425C13.838 12.323 13.91 12.23 14.012 12.146C14.114 12.062 14.255 11.987 14.435 11.921C14.621 11.849 14.855 11.78 15.137 11.714C15.809 11.558 16.292 11.306 16.586 10.958C16.886 10.61 17.036 10.172 17.036 9.64397V9.53597C17.036 9.28397 16.988 9.04097 16.892 8.80697C16.802 8.56697 16.661 8.35697 16.469 8.17698C16.283 7.99697 16.049 7.85297 15.767 7.74497C15.485 7.63097 15.155 7.57397 14.777 7.57397C14.423 7.57397 14.105 7.63397 13.823 7.75397C13.541 7.86797 13.301 8.02698 13.103 8.23097C12.911 8.42897 12.761 8.66297 12.653 8.93297C12.551 9.19697 12.5 9.47597 12.5 9.76997V10.274H13.688V9.87797C13.688 9.51197 13.79 9.22697 13.994 9.02297C14.198 8.81298 14.471 8.70798 14.813 8.70798C15.137 8.70798 15.389 8.79198 15.569 8.95998C15.755 9.12797 15.848 9.33798 15.848 9.58998C15.848 9.72198 15.83 9.84197 15.794 9.94998C15.764 10.052 15.704 10.148 15.614 10.238C15.524 10.322 15.401 10.4 15.245 10.472C15.095 10.538 14.9 10.598 14.66 10.652C14.336 10.724 14.045 10.814 13.787 10.922C13.529 11.024 13.307 11.156 13.121 11.318C12.941 11.48 12.8 11.678 12.698 11.912C12.602 12.146 12.554 12.428 12.554 12.758V14H16.982ZM17.9117 10.148C17.9117 9.33198 18.1157 8.69897 18.5237 8.24897C18.9377 7.79897 19.5077 7.57397 20.2337 7.57397C20.9597 7.57397 21.5267 7.79897 21.9347 8.24897C22.3487 8.69897 22.5557 9.33198 22.5557 10.148V11.552C22.5557 12.392 22.3487 13.031 21.9347 13.469C21.5267 13.907 20.9597 14.126 20.2337 14.126C19.5077 14.126 18.9377 13.907 18.5237 13.469C18.1157 13.031 17.9117 12.392 17.9117 11.552V10.148ZM20.7737 12.947C20.6297 13.013 20.4497 13.046 20.2337 13.046C20.0177 13.046 19.8377 13.013 19.6937 12.947C19.5497 12.875 19.4327 12.776 19.3427 12.65C19.2527 12.524 19.1897 12.374 19.1537 12.2C19.1177 12.026 19.0997 11.834 19.0997 11.624V10.076C19.0997 9.87797 19.1207 9.69197 19.1627 9.51797C19.2047 9.34397 19.2707 9.19398 19.3607 9.06798C19.4507 8.94198 19.5677 8.84298 19.7117 8.77097C19.8557 8.69297 20.0297 8.65397 20.2337 8.65397C20.4377 8.65397 20.6117 8.69297 20.7557 8.77097C20.8997 8.84298 21.0167 8.94198 21.1067 9.06798C21.1967 9.19398 21.2627 9.34397 21.3047 9.51797C21.3467 9.69197 21.3677 9.87797 21.3677 10.076V11.624C21.3677 11.834 21.3497 12.026 21.3137 12.2C21.2777 12.374 21.2147 12.524 21.1247 12.65C21.0347 12.776 20.9177 12.875 20.7737 12.947ZM19.7027 10.319C19.5527 10.469 19.4777 10.646 19.4777 10.85C19.4777 11.054 19.5527 11.231 19.7027 11.381C19.8527 11.531 20.0297 11.606 20.2337 11.606C20.4377 11.606 20.6147 11.531 20.7647 11.381C20.9147 11.231 20.9897 11.054 20.9897 10.85C20.9897 10.646 20.9147 10.469 20.7647 10.319C20.6147 10.169 20.4377 10.094 20.2337 10.094C20.0297 10.094 19.8527 10.169 19.7027 10.319Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 21.9286C7 20.2717 8.34315 18.9286 10 18.9286H40C41.6569 18.9286 43 20.2717 43 21.9286V28C43 29.6569 41.6569 31 40 31H10C8.34315 31 7 29.6569 7 28V21.9286ZM14 21.7H16.25V25.678H17.168V26.812H16.25V28H15.062V26.812H12.254V25.174L14 21.7ZM13.28 25.678V25.516L14.9 22.294H15.062V25.678H13.28ZM19.7987 22.294V26.866H18.0167V28H22.5527V26.866H20.9867V21.7H18.6647L17.9087 24.346V24.454H19.0427L19.6367 22.294H19.7987ZM31.982 26.866V28H27.554V26.758C27.554 26.428 27.602 26.146 27.698 25.912C27.8 25.678 27.941 25.48 28.121 25.318C28.307 25.156 28.529 25.024 28.787 24.922C29.045 24.814 29.336 24.724 29.66 24.652C29.9 24.598 30.095 24.538 30.245 24.472C30.401 24.4 30.524 24.322 30.614 24.238C30.704 24.148 30.764 24.052 30.794 23.95C30.83 23.842 30.848 23.722 30.848 23.59C30.848 23.338 30.755 23.128 30.569 22.96C30.389 22.792 30.137 22.708 29.813 22.708C29.471 22.708 29.198 22.813 28.994 23.023C28.79 23.227 28.688 23.512 28.688 23.878V24.274H27.5V23.77C27.5 23.476 27.551 23.197 27.653 22.933C27.761 22.663 27.911 22.429 28.103 22.231C28.301 22.027 28.541 21.868 28.823 21.754C29.105 21.634 29.423 21.574 29.777 21.574C30.155 21.574 30.485 21.631 30.767 21.745C31.049 21.853 31.283 21.997 31.469 22.177C31.661 22.357 31.802 22.567 31.892 22.807C31.988 23.041 32.036 23.284 32.036 23.536V23.644C32.036 24.172 31.886 24.61 31.586 24.958C31.292 25.306 30.809 25.558 30.137 25.714C29.855 25.78 29.621 25.849 29.435 25.921C29.255 25.987 29.114 26.062 29.012 26.146C28.91 26.23 28.838 26.323 28.796 26.425C28.76 26.521 28.742 26.632 28.742 26.758V26.866H31.982ZM34.8557 22.294V26.866H33.0737V28H37.6097V26.866H36.0437V21.7H33.7217L32.9657 24.346V24.454H34.0997L34.6937 22.294H34.8557Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 35.9286C7 34.2717 8.34315 32.9286 10 32.9286H40C41.6569 32.9286 43 34.2717 43 35.9286V42C43 43.6569 41.6569 45 40 45H10C8.34315 45 7 43.6569 7 42V35.9286ZM16.982 40.866V42H12.554V40.758C12.554 40.428 12.602 40.146 12.698 39.912C12.8 39.678 12.941 39.48 13.121 39.318C13.307 39.156 13.529 39.024 13.787 38.922C14.045 38.814 14.336 38.724 14.66 38.652C14.9 38.598 15.095 38.538 15.245 38.472C15.401 38.4 15.524 38.322 15.614 38.238C15.704 38.148 15.764 38.052 15.794 37.95C15.83 37.842 15.848 37.722 15.848 37.59C15.848 37.338 15.755 37.128 15.569 36.96C15.389 36.792 15.137 36.708 14.813 36.708C14.471 36.708 14.198 36.813 13.994 37.023C13.79 37.227 13.688 37.512 13.688 37.878V38.274H12.5V37.77C12.5 37.476 12.551 37.197 12.653 36.933C12.761 36.663 12.911 36.429 13.103 36.231C13.301 36.027 13.541 35.868 13.823 35.754C14.105 35.634 14.423 35.574 14.777 35.574C15.155 35.574 15.485 35.631 15.767 35.745C16.049 35.853 16.283 35.997 16.469 36.177C16.661 36.357 16.802 36.567 16.892 36.807C16.988 37.041 17.036 37.284 17.036 37.536V37.644C17.036 38.172 16.886 38.61 16.586 38.958C16.292 39.306 15.809 39.558 15.137 39.714C14.855 39.78 14.621 39.849 14.435 39.921C14.255 39.987 14.114 40.062 14.012 40.146C13.91 40.23 13.838 40.323 13.796 40.425C13.76 40.521 13.742 40.632 13.742 40.758V40.866H16.982ZM22.4927 42V40.866H19.2527V40.758C19.2527 40.632 19.2707 40.521 19.3067 40.425C19.3487 40.323 19.4207 40.23 19.5227 40.146C19.6247 40.062 19.7657 39.987 19.9457 39.921C20.1317 39.849 20.3657 39.78 20.6477 39.714C21.3197 39.558 21.8027 39.306 22.0967 38.958C22.3967 38.61 22.5467 38.172 22.5467 37.644V37.536C22.5467 37.284 22.4987 37.041 22.4027 36.807C22.3127 36.567 22.1717 36.357 21.9797 36.177C21.7937 35.997 21.5597 35.853 21.2777 35.745C20.9957 35.631 20.6657 35.574 20.2877 35.574C19.9337 35.574 19.6157 35.634 19.3337 35.754C19.0517 35.868 18.8117 36.027 18.6137 36.231C18.4217 36.429 18.2717 36.663 18.1637 36.933C18.0617 37.197 18.0107 37.476 18.0107 37.77V38.274H19.1987V37.878C19.1987 37.512 19.3007 37.227 19.5047 37.023C19.7087 36.813 19.9817 36.708 20.3237 36.708C20.6477 36.708 20.8997 36.792 21.0797 36.96C21.2657 37.128 21.3587 37.338 21.3587 37.59C21.3587 37.722 21.3407 37.842 21.3047 37.95C21.2747 38.052 21.2147 38.148 21.1247 38.238C21.0347 38.322 20.9117 38.4 20.7557 38.472C20.6057 38.538 20.4107 38.598 20.1707 38.652C19.8467 38.724 19.5557 38.814 19.2977 38.922C19.0397 39.024 18.8177 39.156 18.6317 39.318C18.4517 39.48 18.3107 39.678 18.2087 39.912C18.1127 40.146 18.0647 40.428 18.0647 40.758V42H22.4927ZM30.686 37.482C30.686 37.272 30.608 37.092 30.452 36.942C30.302 36.786 30.065 36.708 29.741 36.708C29.417 36.708 29.159 36.804 28.967 36.996C28.781 37.182 28.688 37.428 28.688 37.734V38.544H28.85C28.952 38.334 29.117 38.166 29.345 38.04C29.573 37.908 29.831 37.842 30.119 37.842C30.377 37.842 30.62 37.89 30.848 37.986C31.076 38.076 31.274 38.208 31.442 38.382C31.61 38.55 31.742 38.757 31.838 39.003C31.934 39.249 31.982 39.528 31.982 39.84V39.948C31.982 40.266 31.928 40.56 31.82 40.83C31.718 41.094 31.568 41.322 31.37 41.514C31.178 41.706 30.944 41.856 30.668 41.964C30.392 42.072 30.083 42.126 29.741 42.126C29.429 42.126 29.135 42.075 28.859 41.973C28.589 41.871 28.352 41.73 28.148 41.55C27.95 41.364 27.791 41.145 27.671 40.893C27.557 40.635 27.5 40.353 27.5 40.047V37.752C27.5 37.422 27.56 37.122 27.68 36.852C27.8 36.582 27.962 36.354 28.166 36.168C28.37 35.976 28.604 35.829 28.868 35.727C29.138 35.625 29.423 35.574 29.723 35.574C30.023 35.574 30.302 35.619 30.56 35.709C30.824 35.793 31.052 35.919 31.244 36.087C31.442 36.249 31.595 36.45 31.703 36.69C31.817 36.924 31.874 37.188 31.874 37.482H30.686ZM30.497 40.722C30.299 40.902 30.047 40.992 29.741 40.992C29.435 40.992 29.183 40.902 28.985 40.722C28.787 40.536 28.688 40.29 28.688 39.984C28.688 39.678 28.787 39.435 28.985 39.255C29.183 39.069 29.435 38.976 29.741 38.976C30.047 38.976 30.299 39.069 30.497 39.255C30.695 39.435 30.794 39.678 30.794 39.984C30.794 40.29 30.695 40.536 30.497 40.722ZM37.5107 42V40.866H34.2707V40.758C34.2707 40.632 34.2887 40.521 34.3247 40.425C34.3667 40.323 34.4387 40.23 34.5407 40.146C34.6427 40.062 34.7837 39.987 34.9637 39.921C35.1497 39.849 35.3837 39.78 35.6657 39.714C36.3377 39.558 36.8207 39.306 37.1147 38.958C37.4147 38.61 37.5647 38.172 37.5647 37.644V37.536C37.5647 37.284 37.5167 37.041 37.4207 36.807C37.3307 36.567 37.1897 36.357 36.9977 36.177C36.8117 35.997 36.5777 35.853 36.2957 35.745C36.0137 35.631 35.6837 35.574 35.3057 35.574C34.9517 35.574 34.6337 35.634 34.3517 35.754C34.0697 35.868 33.8297 36.027 33.6317 36.231C33.4397 36.429 33.2897 36.663 33.1817 36.933C33.0797 37.197 33.0287 37.476 33.0287 37.77V38.274H34.2167V37.878C34.2167 37.512 34.3187 37.227 34.5227 37.023C34.7267 36.813 34.9997 36.708 35.3417 36.708C35.6657 36.708 35.9177 36.792 36.0977 36.96C36.2837 37.128 36.3767 37.338 36.3767 37.59C36.3767 37.722 36.3587 37.842 36.3227 37.95C36.2927 38.052 36.2327 38.148 36.1427 38.238C36.0527 38.322 35.9297 38.4 35.7737 38.472C35.6237 38.538 35.4287 38.598 35.1887 38.652C34.8647 38.724 34.5737 38.814 34.3157 38.922C34.0577 39.024 33.8357 39.156 33.6497 39.318C33.4697 39.48 33.3287 39.678 33.2267 39.912C33.1307 40.146 33.0827 40.428 33.0827 40.758V42H37.5107Z\" />\n    </svg>\n\n  )\n}\n\nexport default RadixIcon;\n","import React, { Component, useState } from 'react';\nimport RenderInBrowser from 'react-render-in-browser';\n\nclass SortInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ram: 0,\n    }\n  }\n\n  // Commented out showing RAM Usage\n  // componentDidMount() {\n  //\n  //   this.ramUsage();\n  //\n  // }\n  //\n  // ramUsage() {\n  //\n  //   this.setState({\n  //     ram: performance.memory.usedJSHeapSize\n  //   })\n  //\n  //   setTimeout(() => {this.ramUsage()}, 1000);\n  //\n  // }\n\n  render() {\n\n    return (\n      <div className=\"info-container\">\n        <h2>{ this.props.sortName }</h2>\n        <ul className=\"info\">\n          <li>Type: { this.props.type }</li>\n\n          <li>Stability: { this.props.stability }</li>\n\n          <li>Space: { this.props.space }</li>\n\n          <li>Best Case: { this.props.bestCase }</li>\n\n          <li>Average Case: { this.props.averageCase }</li>\n\n          <li>Worst Case: { this.props.worstCase }</li>\n\n          {/*<RenderInBrowser chrome only>\n            <li>RAM Usage: { this.state.ram } bytes</li>\n          </RenderInBrowser>*/}\n\n          {/*<li>Time taken: 11s</li>*/}\n        </ul>\n      </div>\n    )\n  }\n};\n\nexport default SortInfo;\n","import React, { Component, useState } from 'react';\n\n// Buttons\nimport BubbleIcon from '../assets/BubbleIcon';\nimport InsertionIcon from '../assets/InsertionIcon';\nimport BucketIcon from '../assets/BucketIcon';\nimport RadixIcon from '../assets/RadixIcon';\n\nclass SortOptions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      active: '',\n    }\n  }\n\n\n  toggleClass(menuOption) {\n\n    this.setState({ active: menuOption });\n\n  };\n\n\n  render() {\n    return (\n      <div className='sort-options-nav'>\n        <ul className='sort-list'>\n          <li>\n            <a className={this.state.active === 'bubble' ? 'active' : {}} href='#' onClick={ () => this.toggleClass('bubble') }>\n              <BubbleIcon />\n              Bubble\n            </a>\n          </li>\n          <li>\n            <a href='#'>\n              <InsertionIcon />\n              Insertion\n            </a>\n          </li>\n          <li>\n            <a href='#'>\n              <BucketIcon />\n              Bucket\n            </a>\n          </li>\n          <li>\n            <a href='#'>\n              <RadixIcon />\n              Radix\n            </a>\n          </li>\n          <li>\n            <a href='#'>\n              <RadixIcon />\n              Merge\n            </a>\n          </li>\n          <li>\n            <a href='#'>\n              <RadixIcon />\n              Quicksort\n            </a>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default SortOptions;\n","import React from 'react';\n\nconst SortIcon = () => {\n  return (\n    <svg className=\"btn-icon-secondary btn-sort-icon\" width=\"31\" height=\"20\" viewBox=\"0 0 31 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M17.8644 1.88047C18.3837 1.88047 18.8046 1.45951 18.8046 0.940233C18.8046 0.420956 18.3837 0 17.8644 0L0.940207 0C0.420931 0 -2.67029e-05 0.420956 -2.67029e-05 0.940233C-2.67029e-05 1.45951 0.420931 1.88047 0.940207 1.88047L17.8644 1.88047Z\" />\n    <path d=\"M15.984 7.52182C16.5032 7.52182 16.9242 7.10087 16.9242 6.58159C16.9242 6.06231 16.5032 5.64136 15.984 5.64136L0.940239 5.64136C0.420961 5.64136 5.72205e-06 6.06231 5.72205e-06 6.58159C5.72205e-06 7.10087 0.420961 7.52182 0.940239 7.52182L15.984 7.52182Z\" />\n    <path d=\"M13.1633 13.1633C13.6826 13.1633 14.1035 12.7423 14.1035 12.2231C14.1035 11.7038 13.6826 11.2828 13.1633 11.2828L0.940259 11.2828C0.420982 11.2828 2.57492e-05 11.7038 2.57492e-05 12.2231C2.57492e-05 12.7423 0.420982 13.1633 0.940259 13.1633L13.1633 13.1633Z\" />\n    <path d=\"M10.3425 18.8047C10.8618 18.8047 11.2828 18.3837 11.2828 17.8644C11.2828 17.3452 10.8618 16.9242 10.3425 16.9242L0.940216 16.9242C0.42094 16.9242 -1.62125e-05 17.3452 -1.62125e-05 17.8644C-1.62125e-05 18.3837 0.42094 18.8047 0.940216 18.8047L10.3425 18.8047Z\" />\n    <path d=\"M22.357 13.2102C21.9898 12.843 21.3945 12.843 21.0273 13.2102C20.6601 13.5773 20.6601 14.1727 21.0273 14.5398L25.0164 18.5289C25.3836 18.8961 25.9789 18.8961 26.3461 18.5289C26.7133 18.1617 26.7133 17.5664 26.3461 17.1992L22.357 13.2102Z\" />\n    <path d=\"M30.3351 14.5398C30.7023 14.1726 30.7023 13.5773 30.3351 13.2101C29.9679 12.8429 29.3726 12.8429 29.0054 13.2101L25.0164 17.1992C24.6492 17.5664 24.6492 18.1617 25.0164 18.5289C25.3836 18.8961 25.9789 18.8961 26.3461 18.5289L30.3351 14.5398Z\" />\n    <path d=\"M26.6215 0.940233C26.6215 0.420956 26.2005 0 25.6813 0C25.162 0 24.741 0.420956 24.741 0.940233L24.741 17.8644C24.741 18.3837 25.162 18.8047 25.6813 18.8047C26.2005 18.8047 26.6215 18.3837 26.6215 17.8644L26.6215 0.940233Z\" />\n    </svg>\n\n  )\n}\n\nexport default SortIcon;\n","import React, { Component } from 'react';\n\n// Components\nimport SortIcon from '../assets/SortIcon';\n\nclass SortingVisualizer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < 100; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"black\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 10);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${ newHeight }px`;\n        }, i * 10);\n      }\n    }\n  }\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      for (let i = 0; i < randomIntFromInterval(1, 1000); i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"visualiser-container\">\n\n        <div className=\"visualiser\">\n          { this.state.array.map((val, idx) => (\n            <div className=\"array-bar\" key={ idx } style={{height: `${ val }px`, width: \"5px\"}}>\n            </div>\n          )) }\n        </div>\n\n        <div className=\"visualiser-buttons\">\n\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.testSortingAlgorithms()}>Test Algo</button>\n\n        </div>\n\n        <button className=\"btn-sort\" onClick={() => this.mergeSort()}>\n          Sort\n          <SortIcon />\n        </button>\n\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) return false;\n  }\n  return true;\n}\n\n// Merge Sort\n\n// // Initial solution\n// const mergeSort = array => {\n//   if (array.length === 1) return array;\n//   const middleIdx = Math.floor(array.length / 2);\n//   const firstHalf = mergeSort(array.slice(0, middleIdx));\n//   const secondHalf = mergeSort(array.slice(middleIdx));\n//   const sortedArray = [];\n//   let i = 0, j = 0;\n//   while (i < firstHalf.length && j < secondHalf.length) {\n//     if (firstHalf[i] < secondHalf[j]) {\n//       sortedArray.push(firstHalf[i++]);\n//     } else {\n//       sortedArray.push(secondHalf[j++]);\n//     }\n//   }\n//   while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n//   while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n//   return sortedArray;\n// };\n\nfunction getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport default SortingVisualizer;\n","import React, { Component, useRef, useState } from 'react';\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { softShadows, MeshWobbleMaterial, Stars, OrbitControls } from \"drei\";\nimport { useSpring, a } from \"react-spring/three\";\n\n// Components\nimport SortIcon from '../assets/SortIcon';\n\nsoftShadows();\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n\n  const mesh = useRef();\n\n  //useFrame allows us to re-render/update rotation on each frame\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach='material'\n        factor={0.6}\n      />\n    </a.mesh>\n\n  );\n};\n\nclass SortingVisualizer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      arraySteps: [],\n      isActive: false,\n      speed: 50,\n      timer: 0,\n    };\n  }\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n  resetArrayRandom() {\n    const array = [];\n    for (let i = 0; i < 30; i++) {\n      array.push(randomIntFromInterval(5, 30));\n    }\n    this.setState({ array: array, arraySteps: array });\n  }\n\n\n  resetArray() {\n\n    const array = [];\n    const arrayShuffled = [];\n\n    for (let i = 1; i < 31; i++) {\n      array.push(i);\n    }\n\n    let m = array.length, t, i;\n\n    while (m) {\n      i = Math.floor(Math.random() * m--);\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    this.setState({ array: array, arraySteps: array });\n\n  }\n\n\n  determineMethod() {\n\n    // const equals = (a, b) =>\n    // a.length === b.length &&\n    // a.every((v, i) => v === b[i]);\n    //\n    // const s = this.state.array\n    // const t = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    //\n    // if ( equals(s, t) ) {\n    //   this.resetArray();\n    // }\n\n    if ( this.props.sortName === 'bubble' ) {\n      this.bubbleSort();\n    }\n    else if ( this.props.sortName === 'insertion' ) {\n      this.insertionSort();\n    }\n\n    else if ( this.props.sortName === 'bucket' ) {\n      this.bucketSort();\n    }\n\n    else if ( this.props.sortName === 'radix' ) {\n      this.radixSort();\n    }\n\n    else if ( this.props.sortName === 'merge' ) {\n      this.mergeSort();\n    }\n\n  }\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Bubble Sort /////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n  bubbleSort() {\n\n    let array = this.state.arraySteps;\n\n    let storeArr = [];\n\n    let swapped = true;\n\n    let end = array.length - 1;\n\n    while (swapped === true) {\n      swapped = false;\n      for (let i = 0; i < end; i++) {\n\n          if (array[i] > array[i+1]) {\n\n            [ array[i], array[i+1] ] = [ array[i+1], array[i] ];\n            swapped = true;\n\n          }\n\n          let tmp = [...array];\n\n          storeArr.push(...[tmp]);\n\n          console.log(tmp);\n          // console.log(storeArr);\n\n      }\n      end--;\n    }\n\n    console.log(storeArr);\n\n    setTimeout(() => {\n\n      for (let i = 0; i < storeArr.length; i++) {\n\n        console.log('test')\n\n        console.log(storeArr[i]);\n\n        setTimeout(() => {\n\n          this.setState({\n            array: storeArr[i],\n          })\n\n        }, i * this.state.speed);\n\n      };\n\n    }, 300);\n\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n// Insertion Sort //////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n  insertionSort() {\n\n    let array = this.state.arraySteps;\n\n    let storeArr = [];\n\n    for (let i = 0; i < array.length; i++) {\n\n      const item = array[i];\n\n      for (var j = i-1; j >= 0 && array[j] > item; j--) {\n        array[j+1] = array[j];\n      }\n\n      array[j+1] = item;\n\n      let tmp = [...array];\n\n      storeArr.push(...[tmp]);\n\n    }\n\n    setTimeout(() => {\n\n      for (let i = 0; i < storeArr.length; i++) {\n\n        setTimeout(() => {\n\n          this.setState({\n            array: storeArr[i],\n          })\n\n        }, i * this.state.speed);\n\n      };\n\n      // while (this.state.isActive) {\n      //\n      //   console.log('testicles')\n      //\n      //     // setTimeout(() => {\n      //     //\n      //     //   this.setState({\n      //     //     isActive: counter++,\n      //     //   });\n      //     //\n      //     // }, 1000);\n      //\n      //   }\n\n    }, 300);\n\n    // console.log(storeArr);\n\n  }\n\n////////////////////////////////////////////////////////////////////////////////\n// Bucket Sort /////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n  bucketSort() {\n\n    let items = this.state.arraySteps;\n    let bucketSize = 10;\n\n    let arr0 = [];\n    let arr1 = [];\n    let arr2 = [];\n\n// Insertion sort for within the buckets.\n\n  const insertionSortBucket = (input, index) => {\n\n    let storeArr = [];\n\n    for (let i = 0; i < input.length; i++) {\n\n      const item = input[i];\n\n      for (var j = i-1; j >= 0 && input[j] > item; j--) {\n        input[j+1] = input[j];\n      }\n\n      input[j+1] = item;\n\n      let tmp = [...input];\n\n      storeArr.push(...[tmp]);\n\n    }\n\n    setTimeout(() => {\n\n      for (let i = 0; i < storeArr.length; i++) {\n\n        setTimeout(() => {\n\n          if (index === 0) {\n            arr0 = storeArr[i];\n          }\n\n          else if (index === 1) {\n            arr1 = storeArr[i];\n          }\n\n          else if (index === 2) {\n            arr2 = storeArr[i];\n          }\n\n          this.setState({\n            array: [...arr0, ...arr1, ...arr2],\n          })\n\n          if (i === (storeArr.length - 1)) {\n            this.setState({\n              isActive: false,\n            });\n          }\n\n        }, i * this.state.speed * 6);\n\n      };\n\n    }, 500);\n\n    return input;\n\n  }\n\n\n// Determin min and max values\n    if(items.length === 0) { return items; }\n\n    let min = Infinity, max = -Infinity;\n\n    for (let i = 0; i < items.length; i++) {\n\n      if (items[i] < min) {\n        min = items[i]\n      }\n\n      if (items[i] > max) {\n        max = items[i]\n      }\n\n    }\n\n    const bucketCount = Math.floor((max - min) / bucketSize) + 1;\n    const buckets = new Array(bucketCount);\n\n    for (let i = 0; i < buckets.length; i++) {\n      buckets[i] = [];\n    }\n\n    for (let i = 0; i < items.length; i++) {\n      buckets[ Math.floor((items[i] - min) / bucketSize) ].push( items[i] );\n    }\n\n    items = [];\n    for (let i = 0; i < buckets.length; i++) {\n\n      buckets[i] = insertionSortBucket( buckets[i], i );\n      items = items.concat( buckets[i] );\n\n    }\n\n  }\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Radix Sort //////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n  radixSort() {\n\n    let storeArr = [];\n\n// Find largest number value's length to determine how many times the fn should run\n    const largestNum = arr => {\n      let largest = \"0\";\n\n      arr.forEach(num => {\n        const strNum = String(num);\n\n        if (strNum.length > largest.length) largest = strNum;\n      });\n      return largest.length;\n    };\n\n\n// Retrieve numbers in the string values\n    const getNum = (num, index) => {\n      const strNum = String(num);\n      let end = strNum.length - 1;\n      const foundNum = strNum[end - index];\n      if (foundNum === undefined) return 0;\n      else return foundNum;\n    };\n\n\n// Radix sort\n    let arr = this.state.array;\n\n    let maxLength = largestNum(arr);\n\n    for (let i = 0; i < maxLength; i++) {\n      let buckets = Array.from({ length: 10 }, () => []);\n\n      for (let j = 0; j < arr.length; j++) {\n        let num = getNum(arr[j], i);\n\n        if (num !== undefined) buckets[num].push(arr[j]);\n      };\n      arr = buckets.flat();\n\n      console.log(buckets);\n\n      let tmp = [...arr];\n\n      storeArr.push(...[tmp]);\n\n    };\n\n\n    setTimeout(() => {\n\n      for (let i = 0; i < storeArr.length; i++) {\n\n        setTimeout(() => {\n\n          this.setState({\n            array: storeArr[i],\n          })\n\n          if (i === (storeArr.length - 1)) {\n            this.setState({\n              isActive: false,\n            });\n          }\n\n        }, i * this.state.speed * 20);\n\n      };\n\n    }, 300);\n\n  }\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Merge Sort //////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n  // mergeSort() {\n  //\n  //   let array = this.state.array\n  //\n  //   const half = array.length / 2\n  //\n  //   // setTimeout(() => {\n  //\n  //     // Base case\n  //     if(array.length < 2){\n  //       return array\n  //     }\n  //\n  //     const left = array.splice(0, half)\n  //\n  //     return this.merge(this.mergeSort(left),this.mergeSort(array));\n  //\n  //   // }, 1000);\n  //\n  // }\n  //\n  // merge(left, right) {\n  //   let arr = []\n  //   // Break out of loop if any one of the array gets empty\n  //   while (left.length && right.length) {\n  //       // Pick the smaller among the smallest element of left and right sub arrays\n  //       if (left[0] < right[0]) {\n  //           arr.push(left.shift())\n  //       } else {\n  //           arr.push(right.shift())\n  //       }\n  //   }\n  //\n  //   this.setState({\n  //     array: [ ...arr, ...left, ...right ]\n  //   })\n  //   // Concatenating the leftover elements\n  //   // (in case we didn't go through the entire left or right array)\n  //   return [ ...arr, ...left, ...right ]\n  // }\n\n  mergeSort() {\n\n    this.setState({\n      array: mergeSortV(this.state.array)\n    })\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"visualiser-container\">\n\n        <div className=\"visualizer-buttons\">\n\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\n          <div className=\"slider-container\">\n            <p>Sort speed</p>\n            <input className=\"slider\" type=\"range\" min=\"1\" max=\"100\" value={this.state.speed} onChange={(e) => {this.setState({speed: e.target.value})}}/>\n          </div>\n\n        </div>\n\n        <button className=\"btn-sort\" onClick={() => this.determineMethod()}>\n          Sort\n          <SortIcon />\n        </button>\n\n        <Canvas\n          colorManagement\n          shadowMap\n          camera={{ position: [-40, 25, 40], fov: 60 }}>\n          <ambientLight intensity={0.3} />\n          <directionalLight\n            castShadow\n            position={[0, 10, 0]}\n            intensity={1.5}\n            shadow-mapSize-width={1024}\n            shadow-mapSize-height={1024}\n            shadow-camera-far={50}\n            shadow-camera-left={-10}\n            shadow-camera-right={10}\n            shadow-camera-top={10}\n            shadow-camera-bottom={-10}\n          />\n          <pointLight position={[-10, 0, -20]} intensity={0.5} />\n          <pointLight position={[0, -10, 0]} intensity={1.5} />\n          <group>\n\n            { this.state.array.map((val, idx) => (\n              <SpinningMesh position={[ idx-30, val-5, idx]} args={[1, 1, 1]} key={ idx } color='red' speed={`0.${val}`} keyIdx={ idx } />\n            )) }\n\n          </group>\n          <OrbitControls />\n          {/*<Stars />*/}\n        </Canvas>\n\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Merge Sort //////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nfunction mergeSortV(array) {\n\n    const half = array.length / 2\n\n    if(array.length < 2){\n      return array\n    }\n\n    const left = array.splice(0, half)\n\n    return merge(mergeSortV(left),mergeSortV(array))\n\n}\n\nfunction merge(left, right) {\n    let arr = []\n\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            arr.push(left.shift())\n        } else {\n            arr.push(right.shift())\n        }\n    }\n\n    return [ ...arr, ...left, ...right ]\n}\n\nexport default SortingVisualizer;\n","export const dosTheme = {\n  primary: '#FFFFFF',\n  primary_rgb: '255, 255, 255',\n  secondary: '#3F40C7',\n  secondary_rgb: '63, 64, 199',\n  tertiary: '#FFB800',\n  tertiary_rgb: '255, 184, 0',\n  gradient_top: '#4155BF',\n  gradient_bottom: '#3A00DE'\n}\n\nexport const atariTheme = {\n  primary: '#FFB800',\n  primary_rgb: '255, 184, 0',\n  secondary: '#000000',\n  secondary_rgb: '0, 0, 0',\n  tertiary: '#FFFFFF',\n  tertiary_rgb: '255, 255, 255',\n  gradient_top: '#000000',\n  gradient_bottom: '#000000'\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n:root {\n  --primary: ${({ theme }) => theme.primary};\n  --primary-rgb: ${({ theme }) => theme.primary_rgb};\n  --secondary: ${({ theme }) => theme.secondary};\n  --secondary-rgb: ${({ theme }) => theme.secondary_rgb};\n  --tertiary: ${({ theme }) => theme.tertiary};\n  --tertiary-rgb: ${({ theme }) => theme.tertiary_rgb};\n  --gradient-top: ${({ theme }) => theme.gradient_top};\n  --gradient-bottom: ${({ theme }) => theme.gradient_bottom};\n}\n`\n","import React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { dosTheme, atariTheme } from './theme';\nimport { GlobalStyles } from './global';\n\n// Fn to toggle between style modes\nfunction DosAtariMode() {\n\n  let currentTheme;\n\n  if (localStorage.getItem('screenMode') === null) {\n    localStorage.setItem('screenMode', 'DOS');\n    currentTheme = 'DOS';\n  } else {\n    currentTheme = localStorage.getItem('screenMode')\n  }\n\n  const [theme, setTheme] = useState(currentTheme);\n\n  const toggleTheme = () => {\n    if (theme === 'DOS') {\n      setTheme('Atari');\n      localStorage.setItem('screenMode', 'Atari');\n    } else {\n      setTheme('DOS');\n      localStorage.setItem('screenMode', 'DOS');\n    }\n  }\n\n\n  return (\n    <ThemeProvider theme={theme === 'DOS' ? dosTheme : atariTheme}>\n      <div className=\"dos-atari-mode\">\n          <GlobalStyles />\n          <p>{theme} mode</p>\n          <label className=\"switch\"><input onClick={toggleTheme} type=\"checkbox\" checked={theme === 'Atari' ? 'true' : false}/> <div></div>\n          </label>\n      </div>\n    </ThemeProvider>\n  );\n\n}\n\nexport default DosAtariMode;\n","import React from 'react';\n\nconst MergeIcon = () => {\n  return (\n    <svg className=\"btn-icon\" width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5 35C5 33.3431 6.34315 32 8 32H42C43.6569 32 45 33.3431 45 35V41C45 42.6569 43.6569 44 42 44H8C6.34315 44 5 42.6569 5 41V35ZM28 34.7H32.428V36.554L30.151 39.884C30.031 40.064 29.935 40.22 29.863 40.352C29.797 40.478 29.764 40.622 29.764 40.784V41H28.486V40.73C28.486 40.61 28.495 40.502 28.513 40.406C28.531 40.31 28.558 40.214 28.594 40.118C28.636 40.022 28.69 39.92 28.756 39.812C28.822 39.704 28.903 39.578 28.999 39.434L31.348 35.996V35.834H28V34.7ZM10.3834 35.294V39.866H8.60141V41H13.1374V39.866H11.5714V34.7H9.24941L8.49341 37.346V37.454H9.62741L10.2214 35.294H10.3834ZM38.7605 39.218C38.7605 39.428 38.8355 39.611 38.9855 39.767C39.1415 39.917 39.3815 39.992 39.7055 39.992C40.0295 39.992 40.2845 39.899 40.4705 39.713C40.6625 39.521 40.7585 39.272 40.7585 38.966V38.156H40.5965C40.5125 38.366 40.3745 38.537 40.1825 38.669C39.9905 38.795 39.7175 38.858 39.3635 38.858C39.0935 38.858 38.8415 38.81 38.6075 38.714C38.3795 38.612 38.1785 38.471 38.0045 38.291C37.8365 38.111 37.7045 37.895 37.6085 37.643C37.5125 37.391 37.4645 37.112 37.4645 36.806V36.698C37.4645 36.398 37.5185 36.119 37.6265 35.861C37.7345 35.597 37.8845 35.372 38.0765 35.186C38.2745 34.994 38.5115 34.844 38.7875 34.736C39.0695 34.628 39.3815 34.574 39.7235 34.574C40.0355 34.574 40.3265 34.625 40.5965 34.727C40.8725 34.829 41.1095 34.973 41.3075 35.159C41.5055 35.339 41.6615 35.558 41.7755 35.816C41.8895 36.068 41.9465 36.347 41.9465 36.653V38.948C41.9465 39.29 41.8895 39.596 41.7755 39.866C41.6615 40.136 41.5055 40.364 41.3075 40.55C41.1095 40.736 40.8755 40.88 40.6055 40.982C40.3415 41.078 40.0535 41.126 39.7415 41.126C39.4355 41.126 39.1505 41.084 38.8865 41C38.6225 40.91 38.3915 40.784 38.1935 40.622C38.0015 40.454 37.8485 40.253 37.7345 40.019C37.6265 39.785 37.5725 39.518 37.5725 39.218H38.7605ZM38.9495 35.987C39.1475 35.801 39.3995 35.708 39.7055 35.708C40.0115 35.708 40.2635 35.801 40.4615 35.987C40.6595 36.167 40.7585 36.41 40.7585 36.716C40.7585 37.022 40.6595 37.268 40.4615 37.454C40.2635 37.634 40.0115 37.724 39.7055 37.724C39.3995 37.724 39.1475 37.634 38.9495 37.454C38.7515 37.268 38.6525 37.022 38.6525 36.716C38.6525 36.41 38.7515 36.167 38.9495 35.987ZM22.659 41V39.866H19.419V39.758C19.419 39.632 19.437 39.521 19.473 39.425C19.515 39.323 19.587 39.23 19.689 39.146C19.791 39.062 19.932 38.987 20.112 38.921C20.298 38.849 20.532 38.78 20.814 38.714C21.486 38.558 21.969 38.306 22.263 37.958C22.563 37.61 22.713 37.172 22.713 36.644V36.536C22.713 36.284 22.665 36.041 22.569 35.807C22.479 35.567 22.338 35.357 22.146 35.177C21.96 34.997 21.726 34.853 21.444 34.745C21.162 34.631 20.832 34.574 20.454 34.574C20.1 34.574 19.782 34.634 19.5 34.754C19.218 34.868 18.978 35.027 18.78 35.231C18.588 35.429 18.438 35.663 18.33 35.933C18.228 36.197 18.177 36.476 18.177 36.77V37.274H19.365V36.878C19.365 36.512 19.467 36.227 19.671 36.023C19.875 35.813 20.148 35.708 20.49 35.708C20.814 35.708 21.066 35.792 21.246 35.96C21.432 36.128 21.525 36.338 21.525 36.59C21.525 36.722 21.507 36.842 21.471 36.95C21.441 37.052 21.381 37.148 21.291 37.238C21.201 37.322 21.078 37.4 20.922 37.472C20.772 37.538 20.577 37.598 20.337 37.652C20.013 37.724 19.722 37.814 19.464 37.922C19.206 38.024 18.984 38.156 18.798 38.318C18.618 38.48 18.477 38.678 18.375 38.912C18.279 39.146 18.231 39.428 18.231 39.758V41H22.659Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14 20C14 18.3431 12.6569 17 11 17H8C6.34315 17 5 18.3431 5 20V26C5 27.6569 6.34315 29 8 29H11C12.6569 29 14 27.6569 14 26V20ZM9.246 20.294V24.866H7.464V26H12V24.866H10.434V19.7H8.112L7.356 22.346V22.454H8.49L9.084 20.294H9.246Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M35 20C35 18.3431 33.6569 17 32 17H29C27.3431 17 26 18.3431 26 20V26C26 27.6569 27.3431 29 29 29H32C33.6569 29 35 27.6569 35 26V20ZM30.021 24.851C29.871 24.695 29.796 24.512 29.796 24.302H28.608C28.608 24.602 28.662 24.869 28.77 25.103C28.884 25.337 29.037 25.538 29.229 25.706C29.427 25.868 29.658 25.994 29.922 26.084C30.186 26.168 30.471 26.21 30.777 26.21C31.089 26.21 31.377 26.162 31.641 26.066C31.911 25.964 32.145 25.82 32.343 25.634C32.541 25.448 32.697 25.22 32.811 24.95C32.925 24.68 32.982 24.374 32.982 24.032V21.737C32.982 21.431 32.925 21.152 32.811 20.9C32.697 20.642 32.541 20.423 32.343 20.243C32.145 20.057 31.908 19.913 31.632 19.811C31.362 19.709 31.071 19.658 30.759 19.658C30.417 19.658 30.105 19.712 29.823 19.82C29.547 19.928 29.31 20.078 29.112 20.27C28.92 20.456 28.77 20.681 28.662 20.945C28.554 21.203 28.5 21.482 28.5 21.782V21.89C28.5 22.196 28.548 22.475 28.644 22.727C28.74 22.979 28.872 23.195 29.04 23.375C29.214 23.555 29.415 23.696 29.643 23.798C29.877 23.894 30.129 23.942 30.399 23.942C30.753 23.942 31.026 23.879 31.218 23.753C31.41 23.621 31.548 23.45 31.632 23.24H31.794V24.05C31.794 24.356 31.698 24.605 31.506 24.797C31.32 24.983 31.065 25.076 30.741 25.076C30.417 25.076 30.177 25.001 30.021 24.851ZM30.741 20.792C30.435 20.792 30.183 20.885 29.985 21.071C29.787 21.251 29.688 21.494 29.688 21.8C29.688 22.106 29.787 22.352 29.985 22.538C30.183 22.718 30.435 22.808 30.741 22.808C31.047 22.808 31.299 22.718 31.497 22.538C31.695 22.352 31.794 22.106 31.794 21.8C31.794 21.494 31.695 21.251 31.497 21.071C31.299 20.885 31.047 20.792 30.741 20.792Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M45.5 20C45.5 18.3431 44.1569 17 42.5 17H39.5C37.8431 17 36.5 18.3431 36.5 20V26C36.5 27.6569 37.8431 29 39.5 29H42.5C44.1569 29 45.5 27.6569 45.5 26V20ZM43.446 26.084V24.95H40.206V24.842C40.206 24.716 40.224 24.605 40.26 24.509C40.302 24.407 40.374 24.314 40.476 24.23C40.578 24.146 40.719 24.071 40.899 24.005C41.085 23.933 41.319 23.864 41.601 23.798C42.273 23.642 42.756 23.39 43.05 23.042C43.35 22.694 43.5 22.256 43.5 21.728V21.62C43.5 21.368 43.452 21.125 43.356 20.891C43.266 20.651 43.125 20.441 42.933 20.261C42.747 20.081 42.513 19.937 42.231 19.829C41.949 19.715 41.619 19.658 41.241 19.658C40.887 19.658 40.569 19.718 40.287 19.838C40.005 19.952 39.765 20.111 39.567 20.315C39.375 20.513 39.225 20.747 39.117 21.017C39.015 21.281 38.964 21.56 38.964 21.854V22.358H40.152V21.962C40.152 21.596 40.254 21.311 40.458 21.107C40.662 20.897 40.935 20.792 41.277 20.792C41.601 20.792 41.853 20.876 42.033 21.044C42.219 21.212 42.312 21.422 42.312 21.674C42.312 21.806 42.294 21.926 42.258 22.034C42.228 22.136 42.168 22.232 42.078 22.322C41.988 22.406 41.865 22.484 41.709 22.556C41.559 22.622 41.364 22.682 41.124 22.736C40.8 22.808 40.509 22.898 40.251 23.006C39.993 23.108 39.771 23.24 39.585 23.402C39.405 23.564 39.264 23.762 39.162 23.996C39.066 24.23 39.018 24.512 39.018 24.842V26.084H43.446Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.5 20C24.5 18.3431 23.1569 17 21.5 17H18.5C16.8431 17 15.5 18.3431 15.5 20V26C15.5 27.6569 16.8431 29 18.5 29H21.5C23.1569 29 24.5 27.6569 24.5 26V20ZM22.428 19.856H18V20.99H21.348V21.152L18.999 24.59C18.903 24.734 18.822 24.86 18.756 24.968C18.69 25.076 18.636 25.178 18.594 25.274C18.558 25.37 18.531 25.466 18.513 25.562C18.495 25.658 18.486 25.766 18.486 25.886V26.156H19.764V25.94C19.764 25.778 19.797 25.634 19.863 25.508C19.935 25.376 20.031 25.22 20.151 25.04L22.428 21.71V19.856Z\" />\n    <path d=\"M9.39839 12.292V7.72H9.23639L8.64239 9.88H7.50839V9.772L8.26439 7.126H10.5864V12.292H12.1524V13.426H7.61639V12.292H9.39839Z\" />\n    <path d=\"M42.982 12.292V13.426H38.554V12.184C38.554 11.854 38.602 11.572 38.698 11.338C38.8 11.104 38.941 10.906 39.121 10.744C39.307 10.582 39.529 10.45 39.787 10.348C40.045 10.24 40.336 10.15 40.66 10.078C40.9 10.024 41.095 9.964 41.245 9.898C41.401 9.826 41.524 9.748 41.614 9.664C41.704 9.574 41.764 9.478 41.794 9.376C41.83 9.268 41.848 9.148 41.848 9.016C41.848 8.764 41.755 8.554 41.569 8.386C41.389 8.218 41.137 8.134 40.813 8.134C40.471 8.134 40.198 8.239 39.994 8.449C39.79 8.653 39.688 8.938 39.688 9.304V9.7H38.5V9.196C38.5 8.902 38.551 8.623 38.653 8.359C38.761 8.089 38.911 7.855 39.103 7.657C39.301 7.453 39.541 7.294 39.823 7.18C40.105 7.06 40.423 7 40.777 7C41.155 7 41.485 7.057 41.767 7.171C42.049 7.279 42.283 7.423 42.469 7.603C42.661 7.783 42.802 7.993 42.892 8.233C42.988 8.467 43.036 8.71 43.036 8.962V9.07C43.036 9.598 42.886 10.036 42.586 10.384C42.292 10.732 41.809 10.984 41.137 11.14C40.855 11.206 40.621 11.275 40.435 11.347C40.255 11.413 40.114 11.488 40.012 11.572C39.91 11.656 39.838 11.749 39.796 11.851C39.76 11.947 39.742 12.058 39.742 12.184V12.292H42.982Z\" />\n    <path d=\"M18.072 7.126H22.5V8.98L20.223 12.31C20.103 12.49 20.007 12.646 19.935 12.778C19.869 12.904 19.836 13.048 19.836 13.21V13.426H18.558V13.156C18.558 13.036 18.567 12.928 18.585 12.832C18.603 12.736 18.63 12.64 18.666 12.544C18.708 12.448 18.762 12.346 18.828 12.238C18.894 12.13 18.975 12.004 19.071 11.86L21.42 8.422V8.26H18.072V7.126Z\" />\n    <path d=\"M29.314 11.644C29.314 11.854 29.389 12.037 29.539 12.193C29.695 12.343 29.935 12.418 30.259 12.418C30.583 12.418 30.838 12.325 31.024 12.139C31.216 11.947 31.312 11.698 31.312 11.392V10.582H31.15C31.066 10.792 30.928 10.963 30.736 11.095C30.544 11.221 30.271 11.284 29.917 11.284C29.647 11.284 29.395 11.236 29.161 11.14C28.933 11.038 28.732 10.897 28.558 10.717C28.39 10.537 28.258 10.321 28.162 10.069C28.066 9.817 28.018 9.538 28.018 9.232V9.124C28.018 8.824 28.072 8.545 28.18 8.287C28.288 8.023 28.438 7.798 28.63 7.612C28.828 7.42 29.065 7.27 29.341 7.162C29.623 7.054 29.935 7 30.277 7C30.589 7 30.88 7.051 31.15 7.153C31.426 7.255 31.663 7.399 31.861 7.585C32.059 7.765 32.215 7.984 32.329 8.242C32.443 8.494 32.5 8.773 32.5 9.079V11.374C32.5 11.716 32.443 12.022 32.329 12.292C32.215 12.562 32.059 12.79 31.861 12.976C31.663 13.162 31.429 13.306 31.159 13.408C30.895 13.504 30.607 13.552 30.295 13.552C29.989 13.552 29.704 13.51 29.44 13.426C29.176 13.336 28.945 13.21 28.747 13.048C28.555 12.88 28.402 12.679 28.288 12.445C28.18 12.211 28.126 11.944 28.126 11.644H29.314ZM30.259 8.134C29.953 8.134 29.701 8.227 29.503 8.413C29.305 8.593 29.206 8.836 29.206 9.142C29.206 9.448 29.305 9.694 29.503 9.88C29.701 10.06 29.953 10.15 30.259 10.15C30.565 10.15 30.817 10.06 31.015 9.88C31.213 9.694 31.312 9.448 31.312 9.142C31.312 8.836 31.213 8.593 31.015 8.413C30.817 8.227 30.565 8.134 30.259 8.134Z\" />\n    </svg>\n\n  )\n}\n\nexport default MergeIcon;\n","import React from 'react';\n\nconst QuicksortIcon = () => {\n  return (\n    <svg className=\"btn-icon\" width=\"60\" height=\"60\" viewBox=\"0 0 50 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40 2H10C5.58172 2 2 5.58172 2 10V40C2 44.4183 5.58172 48 10 48H40C44.4183 48 48 44.4183 48 40V10C48 5.58172 44.4183 2 40 2ZM10 0C4.47715 0 0 4.47715 0 10V40C0 45.5228 4.47715 50 10 50H40C45.5228 50 50 45.5228 50 40V10C50 4.47715 45.5228 0 40 0H10Z\" />\n    <path d=\"M9.83862 12.192V8.69995H14.0506V9.83395H11.0266V11.544H11.1886C11.2726 11.31 11.4286 11.109 11.6566 10.941C11.8906 10.767 12.2026 10.68 12.5926 10.68C12.8866 10.68 13.1506 10.731 13.3846 10.833C13.6186 10.935 13.8166 11.076 13.9786 11.256C14.1406 11.436 14.2636 11.652 14.3476 11.904C14.4376 12.156 14.4826 12.432 14.4826 12.732V12.786C14.4826 13.104 14.4286 13.404 14.3206 13.686C14.2186 13.968 14.0656 14.217 13.8616 14.433C13.6636 14.643 13.4176 14.811 13.1236 14.937C12.8296 15.063 12.4906 15.126 12.1066 15.126C11.7226 15.126 11.3836 15.075 11.0896 14.973C10.7956 14.865 10.5466 14.718 10.3426 14.532C10.1446 14.34 9.99162 14.115 9.88362 13.857C9.78162 13.593 9.73062 13.308 9.73062 13.002V12.786H10.9186V12.894C10.9186 13.212 11.0146 13.476 11.2066 13.686C11.4046 13.89 11.6926 13.992 12.0706 13.992C12.4486 13.992 12.7456 13.89 12.9616 13.686C13.1836 13.482 13.2946 13.2 13.2946 12.84C13.2946 12.498 13.2136 12.243 13.0516 12.075C12.8896 11.901 12.6766 11.814 12.4126 11.814C12.2386 11.814 12.0976 11.853 11.9896 11.931C11.8816 12.003 11.8126 12.09 11.7826 12.192H9.83862Z\" />\n    <path d=\"M11.6206 26.866V22.294H11.4586L10.8646 24.454H9.73062V24.346L10.4866 21.7H12.8086V26.866H14.3746V28H9.83862V26.866H11.6206Z\" />\n    <path d=\"M14.2576 39.866V41H9.82962V39.758C9.82962 39.428 9.87762 39.146 9.97362 38.912C10.0756 38.678 10.2166 38.48 10.3966 38.318C10.5826 38.156 10.8046 38.024 11.0626 37.922C11.3206 37.814 11.6116 37.724 11.9356 37.652C12.1756 37.598 12.3706 37.538 12.5206 37.472C12.6766 37.4 12.7996 37.322 12.8896 37.238C12.9796 37.148 13.0396 37.052 13.0696 36.95C13.1056 36.842 13.1236 36.722 13.1236 36.59C13.1236 36.338 13.0306 36.128 12.8446 35.96C12.6646 35.792 12.4126 35.708 12.0886 35.708C11.7466 35.708 11.4736 35.813 11.2696 36.023C11.0656 36.227 10.9636 36.512 10.9636 36.878V37.274H9.77562V36.77C9.77562 36.476 9.82662 36.197 9.92862 35.933C10.0366 35.663 10.1866 35.429 10.3786 35.231C10.5766 35.027 10.8166 34.868 11.0986 34.754C11.3806 34.634 11.6986 34.574 12.0526 34.574C12.4306 34.574 12.7606 34.631 13.0426 34.745C13.3246 34.853 13.5586 34.997 13.7446 35.177C13.9366 35.357 14.0776 35.567 14.1676 35.807C14.2636 36.041 14.3116 36.284 14.3116 36.536V36.644C14.3116 37.172 14.1616 37.61 13.8616 37.958C13.5676 38.306 13.0846 38.558 12.4126 38.714C12.1306 38.78 11.8966 38.849 11.7106 38.921C11.5306 38.987 11.3896 39.062 11.2876 39.146C11.1856 39.23 11.1136 39.323 11.0716 39.425C11.0356 39.521 11.0176 39.632 11.0176 39.758V39.866H14.2576Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19 8C19 6.34315 20.3431 5 22 5H40C41.6569 5 43 6.34315 43 8V42C43 43.6569 41.6569 45 40 45H22C20.3431 45 19 43.6569 19 42V8ZM25.9436 23.482C25.9436 23.272 25.8656 23.092 25.7096 22.942C25.5596 22.786 25.3226 22.708 24.9986 22.708C24.6746 22.708 24.4166 22.804 24.2246 22.996C24.0386 23.182 23.9456 23.428 23.9456 23.734V24.544H24.1076C24.2096 24.334 24.3746 24.166 24.6026 24.04C24.8306 23.908 25.0886 23.8419 25.3766 23.8419C25.6346 23.8419 25.8776 23.89 26.1056 23.986C26.3336 24.076 26.5316 24.208 26.6996 24.382C26.8676 24.55 26.9996 24.757 27.0956 25.003C27.1916 25.249 27.2396 25.528 27.2396 25.84V25.948C27.2396 26.266 27.1856 26.56 27.0776 26.83C26.9756 27.094 26.8256 27.322 26.6276 27.514C26.4356 27.706 26.2016 27.856 25.9256 27.964C25.6496 28.072 25.3406 28.126 24.9986 28.126C24.6866 28.126 24.3926 28.075 24.1166 27.973C23.8466 27.871 23.6096 27.73 23.4056 27.55C23.2076 27.364 23.0486 27.145 22.9286 26.893C22.8146 26.635 22.7576 26.353 22.7576 26.047V23.7519C22.7576 23.4219 22.8176 23.122 22.9376 22.852C23.0576 22.582 23.2196 22.3539 23.4236 22.1679C23.6276 21.9759 23.8616 21.829 24.1256 21.727C24.3956 21.625 24.6806 21.574 24.9806 21.574C25.2806 21.574 25.5596 21.619 25.8176 21.709C26.0816 21.793 26.3096 21.919 26.5016 22.087C26.6996 22.249 26.8526 22.45 26.9606 22.69C27.0746 22.924 27.1316 23.188 27.1316 23.482H25.9436ZM25.7546 26.722C25.5566 26.902 25.3046 26.992 24.9986 26.992C24.6926 26.992 24.4406 26.902 24.2426 26.722C24.0446 26.536 23.9456 26.29 23.9456 25.984C23.9456 25.678 24.0446 25.435 24.2426 25.255C24.4406 25.069 24.6926 24.976 24.9986 24.976C25.3046 24.976 25.5566 25.069 25.7546 25.255C25.9526 25.435 26.0516 25.678 26.0516 25.984C26.0516 26.29 25.9526 26.536 25.7546 26.722ZM24.6206 9.29395V13.866H22.8386V15H27.3746V13.866H25.8086V8.69995H23.4866L22.7306 11.346V11.454H23.8646L24.4586 9.29395H24.6206ZM39.2576 13.866V15H34.8296V13.758C34.8296 13.428 34.8776 13.146 34.9736 12.912C35.0756 12.678 35.2166 12.48 35.3966 12.318C35.5826 12.156 35.8046 12.024 36.0626 11.922C36.3206 11.814 36.6116 11.724 36.9356 11.652C37.1756 11.598 37.3706 11.538 37.5206 11.472C37.6766 11.4 37.7996 11.322 37.8896 11.238C37.9796 11.148 38.0396 11.052 38.0696 10.95C38.1056 10.842 38.1236 10.722 38.1236 10.59C38.1236 10.338 38.0306 10.128 37.8446 9.95998C37.6646 9.79198 37.4126 9.70798 37.0886 9.70798C36.7466 9.70798 36.4736 9.81298 36.2696 10.023C36.0656 10.227 35.9636 10.512 35.9636 10.878V11.274H34.7756V10.77C34.7756 10.476 34.8266 10.197 34.9286 9.93297C35.0366 9.66297 35.1866 9.42898 35.3786 9.23098C35.5766 9.02698 35.8166 8.86797 36.0986 8.75397C36.3806 8.63397 36.6986 8.57397 37.0526 8.57397C37.4306 8.57397 37.7606 8.63097 38.0426 8.74497C38.3246 8.85297 38.5586 8.99698 38.7446 9.17698C38.9366 9.35698 39.0776 9.56697 39.1676 9.80697C39.2636 10.041 39.3116 10.284 39.3116 10.536V10.644C39.3116 11.172 39.1616 11.61 38.8616 11.958C38.5676 12.306 38.0846 12.558 37.4126 12.714C37.1306 12.78 36.8966 12.849 36.7106 12.921C36.5306 12.987 36.3896 13.062 36.2876 13.146C36.1856 13.23 36.1136 13.323 36.0716 13.425C36.0356 13.521 36.0176 13.632 36.0176 13.758V13.866H39.2576ZM38.5826 21.7H36.3326L34.5866 25.174V26.812H37.3946V28H38.5826V26.812H39.5006V25.678H38.5826V21.7ZM35.6126 25.516V25.678H37.3946V22.294H37.2326L35.6126 25.516ZM36.9986 41.126C36.6446 41.126 36.3266 41.084 36.0446 41C35.7626 40.91 35.5226 40.787 35.3246 40.631C35.1266 40.475 34.9736 40.292 34.8656 40.082C34.7576 39.866 34.7036 39.626 34.7036 39.362V39.308C34.7036 39.086 34.7336 38.891 34.7936 38.723C34.8596 38.555 34.9436 38.411 35.0456 38.291C35.1536 38.171 35.2736 38.072 35.4056 37.994C35.5376 37.916 35.6756 37.856 35.8196 37.814V37.652C35.6936 37.604 35.5706 37.541 35.4506 37.463C35.3366 37.385 35.2346 37.292 35.1446 37.184C35.0606 37.07 34.9916 36.938 34.9376 36.788C34.8896 36.632 34.8656 36.458 34.8656 36.266V36.212C34.8656 35.954 34.9256 35.723 35.0456 35.519C35.1656 35.315 35.3246 35.144 35.5226 35.006C35.7206 34.862 35.9456 34.754 36.1976 34.682C36.4556 34.61 36.7226 34.574 36.9986 34.574C37.2746 34.574 37.5386 34.61 37.7906 34.682C38.0486 34.754 38.2766 34.862 38.4746 35.006C38.6726 35.144 38.8316 35.315 38.9516 35.519C39.0716 35.723 39.1316 35.954 39.1316 36.212V36.266C39.1316 36.458 39.1046 36.632 39.0506 36.788C39.0026 36.938 38.9336 37.07 38.8436 37.184C38.7596 37.292 38.6576 37.385 38.5376 37.463C38.4236 37.541 38.3036 37.604 38.1776 37.652V37.814C38.3216 37.856 38.4596 37.916 38.5916 37.994C38.7236 38.072 38.8406 38.171 38.9426 38.291C39.0506 38.411 39.1346 38.555 39.1946 38.723C39.2606 38.891 39.2936 39.086 39.2936 39.308V39.362C39.2936 39.626 39.2396 39.866 39.1316 40.082C39.0236 40.298 38.8706 40.484 38.6726 40.64C38.4746 40.79 38.2316 40.91 37.9436 41C37.6616 41.084 37.3466 41.126 36.9986 41.126ZM37.8176 39.758C37.6256 39.914 37.3526 39.992 36.9986 39.992C36.6446 39.992 36.3716 39.914 36.1796 39.758C35.9876 39.596 35.8916 39.392 35.8916 39.146C35.8916 38.9 35.9876 38.699 36.1796 38.543C36.3716 38.381 36.6446 38.3 36.9986 38.3C37.3526 38.3 37.6256 38.381 37.8176 38.543C38.0096 38.699 38.1056 38.9 38.1056 39.146C38.1056 39.392 38.0096 39.596 37.8176 39.758ZM36.3236 35.915C36.5036 35.777 36.7286 35.708 36.9986 35.708C37.2686 35.708 37.4936 35.777 37.6736 35.915C37.8536 36.053 37.9436 36.227 37.9436 36.437C37.9436 36.647 37.8536 36.821 37.6736 36.959C37.4936 37.097 37.2686 37.166 36.9986 37.166C36.7286 37.166 36.5036 37.097 36.3236 36.959C36.1436 36.821 36.0536 36.647 36.0536 36.437C36.0536 36.227 36.1436 36.053 36.3236 35.915ZM27.2126 36.554V34.7H22.7846V35.834H26.1326V35.996L23.7836 39.434C23.6876 39.578 23.6066 39.704 23.5406 39.812C23.4746 39.92 23.4206 40.022 23.3786 40.118C23.3426 40.214 23.3156 40.31 23.2976 40.406C23.2796 40.502 23.2706 40.6099 23.2706 40.7299V41H24.5486V40.784C24.5486 40.622 24.5816 40.478 24.6476 40.352C24.7196 40.22 24.8156 40.0639 24.9356 39.8839L27.2126 36.554Z\" />\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M23.4866 8.69995H25.8086V13.866H27.3746V15H22.8386V13.866H24.6206V9.29395H24.4586L23.8646 11.454H22.7306V11.346L23.4866 8.69995ZM24.1206 11.954H22.2306V11.2759L23.1095 8.19995H26.3086V13.366H27.8746V15.5H22.3386V13.366H24.1206V11.954ZM25.9402 23.4073C25.9425 23.4317 25.9436 23.4566 25.9436 23.482H27.1316C27.1316 23.3043 27.1108 23.1377 27.0692 22.982C27.0419 22.8799 27.0058 22.7826 26.9606 22.69C26.8526 22.45 26.6996 22.249 26.5016 22.087C26.3096 21.919 26.0816 21.7929 25.8176 21.709C25.5596 21.6189 25.2806 21.574 24.9806 21.574C24.6806 21.574 24.3956 21.625 24.1256 21.727C23.8616 21.829 23.6276 21.976 23.4236 22.1679C23.2196 22.3539 23.0576 22.582 22.9376 22.852C22.8176 23.122 22.7576 23.4219 22.7576 23.7519V26.047C22.7576 26.353 22.8146 26.635 22.9286 26.893C23.0486 27.145 23.2076 27.364 23.4056 27.55C23.6096 27.73 23.8466 27.871 24.1166 27.973C24.3926 28.075 24.6866 28.126 24.9986 28.126C25.3406 28.126 25.6496 28.072 25.9256 27.964C26.2016 27.856 26.4356 27.706 26.6276 27.514C26.8256 27.322 26.9756 27.094 27.0776 26.83C27.1856 26.56 27.2396 26.266 27.2396 25.948V25.84C27.2396 25.528 27.1916 25.249 27.0956 25.003C26.9996 24.757 26.8676 24.5499 26.6996 24.382C26.5316 24.208 26.3336 24.076 26.1056 23.986C26.1024 23.9846 26.0992 23.9833 26.0961 23.982C26.046 23.9612 25.9952 23.9427 25.9436 23.9266C25.7839 23.8766 25.6172 23.8487 25.4436 23.843C25.4214 23.8423 25.3991 23.8419 25.3766 23.8419C25.0886 23.8419 24.8306 23.908 24.6026 24.04C24.5465 24.071 24.4941 24.1046 24.4456 24.1407C24.2972 24.2513 24.1845 24.3857 24.1076 24.544H23.9456V23.734C23.9456 23.428 24.0386 23.182 24.2246 22.996C24.4166 22.804 24.6746 22.708 24.9986 22.708C25.3226 22.708 25.5596 22.786 25.7096 22.942C25.8468 23.0739 25.9237 23.229 25.9402 23.4073ZM25.7546 25.255C25.5566 25.069 25.3046 24.976 24.9986 24.976C24.6926 24.976 24.4406 25.069 24.2426 25.255C24.0446 25.435 23.9456 25.678 23.9456 25.984C23.9456 26.29 24.0446 26.536 24.2426 26.722C24.4406 26.902 24.6926 26.992 24.9986 26.992C25.3046 26.992 25.5566 26.902 25.7546 26.722C25.9526 26.536 26.0516 26.29 26.0516 25.984C26.0516 25.678 25.9526 25.435 25.7546 25.255ZM25.4152 26.3547C25.4978 26.2759 25.5516 26.169 25.5516 25.984C25.5516 25.7965 25.4966 25.6961 25.4183 25.6249L25.4122 25.6194C25.3189 25.5317 25.1948 25.476 24.9986 25.476C24.8024 25.476 24.6783 25.5317 24.585 25.6194L24.579 25.625C24.5007 25.6962 24.4456 25.7965 24.4456 25.984C24.4456 26.169 24.4995 26.2759 24.582 26.3547C24.6745 26.4375 24.8001 26.492 24.9986 26.492C25.1972 26.492 25.3228 26.4375 25.4152 26.3547ZM24.4674 23.5456C24.4905 23.4586 24.5302 23.3975 24.5782 23.3495C24.6586 23.2691 24.7798 23.208 24.9986 23.208C25.2539 23.208 25.3317 23.2703 25.3492 23.2885L25.356 23.2956L25.3631 23.3024C25.3771 23.3159 25.389 23.329 25.3989 23.342C25.3915 23.342 25.3841 23.3419 25.3766 23.3419C25.0539 23.3419 24.7479 23.4076 24.4674 23.5456ZM27.0067 23.982C27.0234 23.9982 27.04 24.0147 27.0563 24.0315C27.2768 24.253 27.4436 24.5194 27.5614 24.8212C27.6837 25.1346 27.7396 25.4768 27.7396 25.84V25.948C27.7396 26.3226 27.676 26.6793 27.5429 27.0129C27.4161 27.3402 27.2277 27.6278 26.9785 27.8702C26.7339 28.114 26.4409 28.2992 26.1078 28.4296C25.7655 28.5635 25.3935 28.626 24.9986 28.626C24.6311 28.626 24.2781 28.5657 23.9433 28.4419L23.9399 28.4407C23.6168 28.3186 23.3269 28.1473 23.0748 27.9249L23.069 27.9197L23.0633 27.9144C22.8187 27.6846 22.6232 27.4145 22.4772 27.1079L22.4741 27.1015L22.4713 27.095C22.3268 26.7681 22.2576 26.4166 22.2576 26.047V23.7519C22.2576 23.3602 22.3291 22.9899 22.4807 22.6489C22.6262 22.3215 22.8266 22.0364 23.0838 21.8011C23.3347 21.5657 23.623 21.3851 23.9454 21.2606L23.9489 21.2592C24.2776 21.135 24.6227 21.074 24.9806 21.074C25.3288 21.074 25.6618 21.1259 25.9757 21.2346C26.2942 21.3368 26.5797 21.4925 26.8247 21.7052C27.0793 21.9152 27.276 22.1749 27.4135 22.4779C27.5625 22.7866 27.6316 23.1246 27.6316 23.482V23.982H27.0067ZM22.2846 34.2H27.7126V36.7086L25.3516 40.1613C25.3511 40.1621 25.3506 40.1629 25.3501 40.1637C25.2373 40.3329 25.1511 40.4735 25.089 40.5869C25.0662 40.6317 25.0486 40.6935 25.0486 40.784V41.5H22.7706V40.7299C22.7706 40.5857 22.7814 40.4461 22.8062 40.3138C22.8298 40.188 22.8648 40.0641 22.9105 39.9424L22.9152 39.9298L22.9205 39.9175C22.9733 39.797 23.0385 39.6748 23.114 39.5512C23.1844 39.436 23.2692 39.3042 23.3676 39.1566L23.3708 39.1519L25.2961 36.334H22.2846V34.2ZM26.1326 35.996L23.7836 39.434C23.6876 39.578 23.6066 39.7039 23.5406 39.812C23.4746 39.92 23.4206 40.0219 23.3786 40.118C23.3426 40.214 23.3156 40.31 23.2976 40.406C23.292 40.4361 23.2872 40.4674 23.2833 40.5C23.2749 40.571 23.2706 40.6476 23.2706 40.7299V41H24.5486V40.784C24.5486 40.622 24.5816 40.478 24.6476 40.352C24.7196 40.22 24.8156 40.0639 24.9356 39.8839L27.2126 36.554V34.7H22.7846V35.834H26.1326V35.996ZM39.7576 13.366V15.5H34.3296V13.758C34.3296 13.3818 34.384 13.0317 34.511 12.7222L34.5152 12.7121C34.6441 12.4163 34.8262 12.1587 35.0621 11.9463L35.0682 11.9409C35.1363 11.8816 35.2077 11.826 35.2822 11.774H34.2756V10.77C34.2756 10.4168 34.3371 10.0765 34.4622 9.75278L34.4643 9.74727C34.5952 9.42014 34.7799 9.13017 35.0197 8.8829C35.2685 8.62657 35.5668 8.43025 35.9071 8.29211C36.2587 8.14323 36.6433 8.07397 37.0526 8.07397C37.478 8.07397 37.8727 8.13776 38.2257 8.27968C38.5572 8.4072 38.8492 8.58323 39.0895 8.81493C39.3326 9.04368 39.5157 9.31457 39.6331 9.62423C39.7518 9.91609 39.8116 10.2212 39.8116 10.536V10.644C39.8116 11.272 39.6306 11.8307 39.2419 12.2826C38.8508 12.7443 38.2508 13.0326 37.5261 13.2009C37.289 13.2564 37.0977 13.3119 36.948 13.366H39.7576ZM36.0176 13.866V13.758C36.0176 13.632 36.0356 13.521 36.0716 13.425C36.0798 13.405 36.0892 13.3853 36.0998 13.366C36.143 13.2868 36.2056 13.2135 36.2876 13.146C36.3896 13.062 36.5306 12.987 36.7106 12.921C36.8966 12.849 37.1306 12.78 37.4126 12.714C38.0846 12.558 38.5676 12.306 38.8616 11.958C39.1616 11.61 39.3116 11.172 39.3116 10.644V10.536C39.3116 10.284 39.2636 10.041 39.1676 9.80697C39.0776 9.56697 38.9366 9.35698 38.7446 9.17698C38.5586 8.99697 38.3246 8.85297 38.0426 8.74497C37.7606 8.63097 37.4306 8.57397 37.0526 8.57397C36.6986 8.57397 36.3806 8.63397 36.0986 8.75397C35.8166 8.86797 35.5766 9.02698 35.3786 9.23098C35.1866 9.42898 35.0366 9.66297 34.9286 9.93297C34.8266 10.197 34.7756 10.476 34.7756 10.77V11.274H35.9636V10.878C35.9636 10.512 36.0656 10.227 36.2696 10.023C36.4736 9.81297 36.7466 9.70798 37.0886 9.70798C37.4126 9.70798 37.6646 9.79198 37.8446 9.95998C38.0306 10.128 38.1236 10.338 38.1236 10.59C38.1236 10.722 38.1056 10.842 38.0696 10.95C38.0396 11.052 37.9796 11.148 37.8896 11.238C37.7996 11.322 37.6766 11.4 37.5206 11.472C37.3706 11.538 37.1756 11.598 36.9356 11.652C36.6116 11.724 36.3206 11.814 36.0626 11.922C35.8046 12.024 35.5826 12.156 35.3966 12.318C35.2166 12.48 35.0756 12.678 34.9736 12.912C34.8776 13.146 34.8296 13.428 34.8296 13.758V15H39.2576V13.866H36.0176ZM36.4636 11.2553C36.5809 11.2221 36.7019 11.1917 36.8264 11.164C37.0459 11.1146 37.2056 11.0638 37.3152 11.0161C37.4317 10.9619 37.5023 10.9137 37.5423 10.8781C37.5794 10.8394 37.5879 10.8158 37.5899 10.8089L37.5924 10.8003L37.5953 10.7919C37.6118 10.7422 37.6236 10.6766 37.6236 10.59C37.6236 10.4785 37.5899 10.4036 37.5095 10.331L37.5034 10.3256C37.4422 10.2684 37.3271 10.208 37.0886 10.208C36.8571 10.208 36.7222 10.2746 36.6282 10.3714L36.6232 10.3766C36.5365 10.4633 36.4636 10.6071 36.4636 10.878V11.2553ZM36.0243 21.2H39.0826V25.178H40.0006V27.312H39.0826V28.5H36.8946V27.312H34.0866V25.0554L36.0243 21.2ZM37.3946 26.812V28H38.5826V26.812H39.5006V25.678H38.5826V21.7H36.3326L34.5866 25.174V26.812H37.3946ZM35.8926 41.4763C35.5633 41.3712 35.2676 41.2226 35.0152 41.0237C34.7647 40.8264 34.5639 40.5886 34.421 40.3107L34.4184 40.3056C34.2725 40.0139 34.2036 39.6962 34.2036 39.362V39.308C34.2036 39.0421 34.2394 38.7881 34.3227 38.5548L34.3254 38.5474L34.3282 38.5401C34.4115 38.3282 34.5221 38.1348 34.6646 37.9672L34.6692 37.9618L34.674 37.9565C34.7585 37.8625 34.85 37.7772 34.9484 37.7011C34.8817 37.64 34.819 37.5743 34.7605 37.5041L34.7509 37.4926L34.7421 37.4806C34.6261 37.3231 34.5355 37.1472 34.4672 36.9573L34.4632 36.9463L34.4597 36.935C34.3947 36.7238 34.3656 36.4993 34.3656 36.266V36.212C34.3656 35.8731 34.4454 35.5531 34.6146 35.2655C34.771 34.9996 34.9786 34.7766 35.2325 34.5987C35.4801 34.4194 35.7576 34.2877 36.0602 34.2012L36.0632 34.2004C36.3663 34.1158 36.6786 34.074 36.9986 34.074C37.3181 34.074 37.6281 34.1157 37.9267 34.2008C38.2344 34.2869 38.5156 34.4183 38.7647 34.5987C39.0187 34.7766 39.2262 34.9996 39.3826 35.2655C39.5518 35.5531 39.6316 35.8731 39.6316 36.212V36.266C39.6316 36.5027 39.5986 36.7311 39.525 36.9459C39.4606 37.1453 39.3657 37.3292 39.2374 37.4921C39.1791 37.5669 39.1151 37.6361 39.0458 37.6998C39.1449 37.7774 39.2361 37.8649 39.3191 37.9619C39.4709 38.1321 39.5842 38.3298 39.6629 38.5475C39.7543 38.7834 39.7936 39.0401 39.7936 39.308V39.362C39.7936 39.6962 39.7247 40.0139 39.5788 40.3056C39.4365 40.5903 39.2353 40.8332 38.982 41.0327L38.9746 41.0386C38.7219 41.23 38.4244 41.3736 38.0927 41.4772L38.0864 41.4792C37.7505 41.5793 37.3864 41.626 36.9986 41.626C36.6057 41.626 36.2385 41.5794 35.9019 41.4792L35.8926 41.4763ZM39.1946 38.723C39.1346 38.555 39.0506 38.411 38.9426 38.291C38.845 38.1761 38.7336 38.0805 38.6084 38.0041C38.6028 38.0007 38.5972 37.9973 38.5916 37.994C38.4812 37.9287 38.3665 37.8761 38.2477 37.836C38.2245 37.8282 38.2011 37.8208 38.1776 37.814V37.652C38.1956 37.6451 38.2134 37.638 38.2311 37.6305C38.3377 37.5857 38.4399 37.5299 38.5376 37.463C38.5538 37.4524 38.5697 37.4416 38.5853 37.4305C38.6848 37.3596 38.771 37.2774 38.8436 37.184C38.9336 37.07 39.0026 36.938 39.0506 36.788C39.1046 36.632 39.1316 36.458 39.1316 36.266V36.212C39.1316 35.954 39.0716 35.723 38.9516 35.519C38.8316 35.315 38.6726 35.144 38.4746 35.006C38.2766 34.862 38.0486 34.754 37.7906 34.682C37.5386 34.61 37.2746 34.574 36.9986 34.574C36.7226 34.574 36.4556 34.61 36.1976 34.682C35.9456 34.754 35.7206 34.862 35.5226 35.006C35.3246 35.144 35.1656 35.315 35.0456 35.519C34.9256 35.723 34.8656 35.954 34.8656 36.212V36.266C34.8656 36.458 34.8896 36.632 34.9376 36.788C34.9916 36.938 35.0606 37.07 35.1446 37.184C35.2231 37.2782 35.3108 37.361 35.4076 37.4324C35.4218 37.4429 35.4361 37.453 35.4506 37.463C35.5536 37.5299 35.6588 37.5858 35.7661 37.6306C35.7839 37.6381 35.8017 37.6452 35.8196 37.652V37.814C35.7961 37.8208 35.7727 37.8282 35.7495 37.836C35.6307 37.8761 35.516 37.9287 35.4056 37.994C35.3996 37.9975 35.3936 38.0011 35.3876 38.0048C35.2627 38.0811 35.1487 38.1765 35.0456 38.291C34.9436 38.411 34.8596 38.555 34.7936 38.723C34.7336 38.891 34.7036 39.086 34.7036 39.308V39.362C34.7036 39.626 34.7576 39.866 34.8656 40.082C34.9736 40.292 35.1266 40.475 35.3246 40.631C35.5226 40.787 35.7626 40.91 36.0446 41C36.3266 41.084 36.6446 41.126 36.9986 41.126C37.3466 41.126 37.6616 41.084 37.9436 41C38.2316 40.91 38.4746 40.79 38.6726 40.64C38.8706 40.484 39.0236 40.298 39.1316 40.082C39.2396 39.866 39.2936 39.626 39.2936 39.362V39.308C39.2936 39.086 39.2606 38.891 39.1946 38.723ZM37.8176 38.543C37.6256 38.381 37.3526 38.3 36.9986 38.3C36.6446 38.3 36.3716 38.381 36.1796 38.543C35.9876 38.699 35.8916 38.9 35.8916 39.146C35.8916 39.392 35.9876 39.596 36.1796 39.758C36.3716 39.914 36.6446 39.992 36.9986 39.992C37.3526 39.992 37.6256 39.914 37.8176 39.758C38.0096 39.596 38.1056 39.392 38.1056 39.146C38.1056 38.9 38.0096 38.699 37.8176 38.543ZM37.499 39.3726C37.5782 39.3045 37.6056 39.2396 37.6056 39.146C37.6056 39.0515 37.5782 38.9927 37.5023 38.931L37.4951 38.9252C37.4241 38.8652 37.2823 38.8 36.9986 38.8C36.7149 38.8 36.5731 38.8652 36.502 38.9251L36.495 38.9311C36.419 38.9928 36.3916 39.0515 36.3916 39.146C36.3916 39.2396 36.419 39.3044 36.4982 39.3726C36.5708 39.4299 36.7155 39.492 36.9986 39.492C37.2818 39.492 37.4264 39.4299 37.499 39.3726ZM40 5.5H22C20.6193 5.5 19.5 6.61929 19.5 8V42C19.5 43.3807 20.6193 44.5 22 44.5H40C41.3807 44.5 42.5 43.3807 42.5 42V8C42.5 6.61929 41.3807 5.5 40 5.5ZM35.6126 25.678V25.516L37.2326 22.294H37.3946V25.678H35.6126ZM36.8946 25.178V24.0793L36.3422 25.178H36.8946ZM36.9986 36.208C36.817 36.208 36.7048 36.2528 36.6278 36.3118C36.5598 36.3639 36.5536 36.3963 36.5536 36.437C36.5536 36.4776 36.5598 36.51 36.6278 36.5622C36.7048 36.6212 36.817 36.666 36.9986 36.666C37.1803 36.666 37.2924 36.6212 37.3694 36.5622C37.4374 36.51 37.4436 36.4776 37.4436 36.437C37.4436 36.3963 37.4374 36.3639 37.3694 36.3118C37.2924 36.2528 37.1803 36.208 36.9986 36.208ZM22 5C20.3431 5 19 6.34315 19 8V42C19 43.6569 20.3431 45 22 45H40C41.6569 45 43 43.6569 43 42V8C43 6.34315 41.6569 5 40 5H22ZM36.9986 35.708C36.7286 35.708 36.5036 35.777 36.3236 35.915C36.1436 36.053 36.0536 36.227 36.0536 36.437C36.0536 36.647 36.1436 36.821 36.3236 36.959C36.5036 37.097 36.7286 37.166 36.9986 37.166C37.2686 37.166 37.4936 37.097 37.6736 36.959C37.8536 36.821 37.9436 36.647 37.9436 36.437C37.9436 36.227 37.8536 36.053 37.6736 35.915C37.4936 35.777 37.2686 35.708 36.9986 35.708Z\" />\n    </svg>\n\n  )\n}\n\nexport default QuicksortIcon;\n","import React, { Component, useState } from 'react';\n\nimport '../App.css';\n\n// Components\nimport HeaderLogo from './HeaderLogo';\nimport SortOptions from './SortOptions';\nimport SortInfo from './SortInfo';\nimport SortingVisualizer2D from './SortingVisualizer2D.js';\nimport SortingVisualizer from './SortingVisualizer.js';\nimport DosAtariMode from './DosAtariMode';\n\n// Buttons\nimport BubbleIcon from '../assets/BubbleIcon';\nimport InsertionIcon from '../assets/InsertionIcon';\nimport BucketIcon from '../assets/BucketIcon';\nimport RadixIcon from '../assets/RadixIcon';\nimport MergeIcon from '../assets/MergeIcon';\nimport QuicksortIcon from '../assets/QuicksortIcon';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      method: 'bubble',\n      sortName: 'Bubble Sort',\n      type: 'Comparison',\n      stability: 'Stable',\n      space: '0(1)',\n      bestCase: 'Ω(N)',\n      averageCase: '0(N^2)',\n      worstCase: 'O(N^2)',\n      active: 'bubble',\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n\n        <div className=\"nav-container\">\n          <HeaderLogo />\n          {/*<SortOptions />*/}\n          <div className=\"sort-options-nav\">\n            <ul className=\"sort-list\">\n              <li>\n                <a className={this.state.active === 'bubble' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'bubble', sortName: 'Bubble Sort', type: 'Comparison', stability: 'Stable', space: '0(1)', bestCase: 'Ω(N)', averageCase: '0(N^2)', worstCase: 'O(N^2)', active: 'bubble' }) }>\n                  <BubbleIcon />\n                  Bubble\n                </a>\n              </li>\n              <li>\n                <a className={this.state.active === 'insertion' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'insertion', sortName: 'Insertion Sort', type: 'Comparison', stability: 'Stable', space: '0(1)', bestCase: 'Ω(N)', averageCase: '0(N^2)', worstCase: 'O(N^2)', active: 'insertion' }) }>\n                  <InsertionIcon />\n                  Insertion\n                </a>\n              </li>\n              <li>\n                <a className={this.state.active === 'bucket' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'bucket', sortName: 'Bucket Sort', type: 'Distribution', stability: 'Stable', space: '0(N+K)', bestCase: 'Ω(N+K)', averageCase: '0(N+K)', worstCase: 'O(N^2)', active: 'bucket' }) }>\n                  <BucketIcon />\n                  Bucket\n                </a>\n              </li>\n              <li>\n                <a className={this.state.active === 'radix' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'radix', sortName: 'Radix Sort', type: 'Distribution', stability: 'Stable', space: '0(N+K)', bestCase: 'Ω(NK)', averageCase: '0(NK)', worstCase: 'O(NK)', active: 'radix' }) }>\n                  <RadixIcon />\n                  Radix\n                </a>\n              </li>\n              <li>\n                <a className={this.state.active === 'merge' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'merge', sortName: 'Merge Sort', type: 'Comparison', stability: 'Stable', space: '0(N)', bestCase: 'Ω(log(N))', averageCase: '0(log(N))', worstCase: 'O(log(N))', active: 'merge' }) }>\n                  <MergeIcon />\n                  Merge\n                </a>\n              </li>\n              <li>\n                <a className={this.state.active === 'quicksort' ? 'active' : {}} href=\"#\" onClick={ () => this.setState({\n                  method: 'quicksort', sortName: 'Quicksort', type: 'Comparison', stability: 'Unstable', space: '0(log(N))', bestCase: 'Ω(log(N))', averageCase: '0(log(N))', worstCase: 'O(N^2)', active: 'quicksort' }) }>\n                  <QuicksortIcon />\n                  Quicksort\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"main-container\">\n          <SortInfo\n            sortName= {this.state.sortName}\n            type= {this.state.type}\n            stability={this.state.stability}\n            space= {this.state.space}\n            bestCase= {this.state.bestCase}\n            averageCase= {this.state.averageCase}\n            worstCase= {this.state.worstCase}\n           />\n          {/* <SortingVisualizer2D /> */}\n          <SortingVisualizer sortName= {this.state.method} />\n        </div>\n\n        <DosAtariMode />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}